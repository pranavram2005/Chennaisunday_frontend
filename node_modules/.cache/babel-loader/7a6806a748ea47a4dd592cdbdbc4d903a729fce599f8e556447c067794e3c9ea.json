{"ast":null,"code":"/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n'use strict';\n\nvar ReactDOMComponentTree = require('./ReactDOMComponentTree');\nfunction isCheckable(elem) {\n  var type = elem.type;\n  var nodeName = elem.nodeName;\n  return nodeName && nodeName.toLowerCase() === 'input' && (type === 'checkbox' || type === 'radio');\n}\nfunction getTracker(inst) {\n  return inst._wrapperState.valueTracker;\n}\nfunction attachTracker(inst, tracker) {\n  inst._wrapperState.valueTracker = tracker;\n}\nfunction detachTracker(inst) {\n  inst._wrapperState.valueTracker = null;\n}\nfunction getValueFromNode(node) {\n  var value;\n  if (node) {\n    value = isCheckable(node) ? '' + node.checked : node.value;\n  }\n  return value;\n}\nvar inputValueTracking = {\n  // exposed for testing\n  _getTrackerFromNode: function (node) {\n    return getTracker(ReactDOMComponentTree.getInstanceFromNode(node));\n  },\n  track: function (inst) {\n    if (getTracker(inst)) {\n      return;\n    }\n    var node = ReactDOMComponentTree.getNodeFromInstance(inst);\n    var valueField = isCheckable(node) ? 'checked' : 'value';\n    var descriptor = Object.getOwnPropertyDescriptor(node.constructor.prototype, valueField);\n    var currentValue = '' + node[valueField];\n\n    // if someone has already defined a value or Safari, then bail\n    // and don't track value will cause over reporting of changes,\n    // but it's better then a hard failure\n    // (needed for certain tests that spyOn input values and Safari)\n    if (node.hasOwnProperty(valueField) || typeof descriptor.get !== 'function' || typeof descriptor.set !== 'function') {\n      return;\n    }\n    Object.defineProperty(node, valueField, {\n      enumerable: descriptor.enumerable,\n      configurable: true,\n      get: function () {\n        return descriptor.get.call(this);\n      },\n      set: function (value) {\n        currentValue = '' + value;\n        descriptor.set.call(this, value);\n      }\n    });\n    attachTracker(inst, {\n      getValue: function () {\n        return currentValue;\n      },\n      setValue: function (value) {\n        currentValue = '' + value;\n      },\n      stopTracking: function () {\n        detachTracker(inst);\n        delete node[valueField];\n      }\n    });\n  },\n  updateValueIfChanged: function (inst) {\n    if (!inst) {\n      return false;\n    }\n    var tracker = getTracker(inst);\n    if (!tracker) {\n      inputValueTracking.track(inst);\n      return true;\n    }\n    var lastValue = tracker.getValue();\n    var nextValue = getValueFromNode(ReactDOMComponentTree.getNodeFromInstance(inst));\n    if (nextValue !== lastValue) {\n      tracker.setValue(nextValue);\n      return true;\n    }\n    return false;\n  },\n  stopTracking: function (inst) {\n    var tracker = getTracker(inst);\n    if (tracker) {\n      tracker.stopTracking();\n    }\n  }\n};\nmodule.exports = inputValueTracking;","map":{"version":3,"names":["ReactDOMComponentTree","require","isCheckable","elem","type","nodeName","toLowerCase","getTracker","inst","_wrapperState","valueTracker","attachTracker","tracker","detachTracker","getValueFromNode","node","value","checked","inputValueTracking","_getTrackerFromNode","getInstanceFromNode","track","getNodeFromInstance","valueField","descriptor","Object","getOwnPropertyDescriptor","constructor","prototype","currentValue","hasOwnProperty","get","set","defineProperty","enumerable","configurable","call","getValue","setValue","stopTracking","updateValueIfChanged","lastValue","nextValue","module","exports"],"sources":["D:/Project_CS/react_side/myapp/node_modules/react-file-viewer/node_modules/react-dom/lib/inputValueTracking.js"],"sourcesContent":["/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n'use strict';\n\nvar ReactDOMComponentTree = require('./ReactDOMComponentTree');\n\nfunction isCheckable(elem) {\n  var type = elem.type;\n  var nodeName = elem.nodeName;\n  return nodeName && nodeName.toLowerCase() === 'input' && (type === 'checkbox' || type === 'radio');\n}\n\nfunction getTracker(inst) {\n  return inst._wrapperState.valueTracker;\n}\n\nfunction attachTracker(inst, tracker) {\n  inst._wrapperState.valueTracker = tracker;\n}\n\nfunction detachTracker(inst) {\n  inst._wrapperState.valueTracker = null;\n}\n\nfunction getValueFromNode(node) {\n  var value;\n  if (node) {\n    value = isCheckable(node) ? '' + node.checked : node.value;\n  }\n  return value;\n}\n\nvar inputValueTracking = {\n  // exposed for testing\n  _getTrackerFromNode: function (node) {\n    return getTracker(ReactDOMComponentTree.getInstanceFromNode(node));\n  },\n\n\n  track: function (inst) {\n    if (getTracker(inst)) {\n      return;\n    }\n\n    var node = ReactDOMComponentTree.getNodeFromInstance(inst);\n    var valueField = isCheckable(node) ? 'checked' : 'value';\n    var descriptor = Object.getOwnPropertyDescriptor(node.constructor.prototype, valueField);\n\n    var currentValue = '' + node[valueField];\n\n    // if someone has already defined a value or Safari, then bail\n    // and don't track value will cause over reporting of changes,\n    // but it's better then a hard failure\n    // (needed for certain tests that spyOn input values and Safari)\n    if (node.hasOwnProperty(valueField) || typeof descriptor.get !== 'function' || typeof descriptor.set !== 'function') {\n      return;\n    }\n\n    Object.defineProperty(node, valueField, {\n      enumerable: descriptor.enumerable,\n      configurable: true,\n      get: function () {\n        return descriptor.get.call(this);\n      },\n      set: function (value) {\n        currentValue = '' + value;\n        descriptor.set.call(this, value);\n      }\n    });\n\n    attachTracker(inst, {\n      getValue: function () {\n        return currentValue;\n      },\n      setValue: function (value) {\n        currentValue = '' + value;\n      },\n      stopTracking: function () {\n        detachTracker(inst);\n        delete node[valueField];\n      }\n    });\n  },\n\n  updateValueIfChanged: function (inst) {\n    if (!inst) {\n      return false;\n    }\n    var tracker = getTracker(inst);\n\n    if (!tracker) {\n      inputValueTracking.track(inst);\n      return true;\n    }\n\n    var lastValue = tracker.getValue();\n    var nextValue = getValueFromNode(ReactDOMComponentTree.getNodeFromInstance(inst));\n\n    if (nextValue !== lastValue) {\n      tracker.setValue(nextValue);\n      return true;\n    }\n\n    return false;\n  },\n  stopTracking: function (inst) {\n    var tracker = getTracker(inst);\n    if (tracker) {\n      tracker.stopTracking();\n    }\n  }\n};\n\nmodule.exports = inputValueTracking;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}