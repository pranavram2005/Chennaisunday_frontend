{"ast":null,"code":"/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\n'use strict';\n\nvar ReactOwner = require('./ReactOwner');\nvar ReactRef = {};\nfunction attachRef(ref, component, owner) {\n  if (typeof ref === 'function') {\n    ref(component.getPublicInstance());\n  } else {\n    // Legacy ref\n    ReactOwner.addComponentAsRefTo(component, ref, owner);\n  }\n}\nfunction detachRef(ref, component, owner) {\n  if (typeof ref === 'function') {\n    ref(null);\n  } else {\n    // Legacy ref\n    ReactOwner.removeComponentAsRefFrom(component, ref, owner);\n  }\n}\nReactRef.attachRefs = function (instance, element) {\n  if (element === null || typeof element !== 'object') {\n    return;\n  }\n  var ref = element.ref;\n  if (ref != null) {\n    attachRef(ref, instance, element._owner);\n  }\n};\nReactRef.shouldUpdateRefs = function (prevElement, nextElement) {\n  // If either the owner or a `ref` has changed, make sure the newest owner\n  // has stored a reference to `this`, and the previous owner (if different)\n  // has forgotten the reference to `this`. We use the element instead\n  // of the public this.props because the post processing cannot determine\n  // a ref. The ref conceptually lives on the element.\n\n  // TODO: Should this even be possible? The owner cannot change because\n  // it's forbidden by shouldUpdateReactComponent. The ref can change\n  // if you swap the keys of but not the refs. Reconsider where this check\n  // is made. It probably belongs where the key checking and\n  // instantiateReactComponent is done.\n\n  var prevRef = null;\n  var prevOwner = null;\n  if (prevElement !== null && typeof prevElement === 'object') {\n    prevRef = prevElement.ref;\n    prevOwner = prevElement._owner;\n  }\n  var nextRef = null;\n  var nextOwner = null;\n  if (nextElement !== null && typeof nextElement === 'object') {\n    nextRef = nextElement.ref;\n    nextOwner = nextElement._owner;\n  }\n  return prevRef !== nextRef ||\n  // If owner changes but we have an unchanged function ref, don't update refs\n  typeof nextRef === 'string' && nextOwner !== prevOwner;\n};\nReactRef.detachRefs = function (instance, element) {\n  if (element === null || typeof element !== 'object') {\n    return;\n  }\n  var ref = element.ref;\n  if (ref != null) {\n    detachRef(ref, instance, element._owner);\n  }\n};\nmodule.exports = ReactRef;","map":{"version":3,"names":["ReactOwner","require","ReactRef","attachRef","ref","component","owner","getPublicInstance","addComponentAsRefTo","detachRef","removeComponentAsRefFrom","attachRefs","instance","element","_owner","shouldUpdateRefs","prevElement","nextElement","prevRef","prevOwner","nextRef","nextOwner","detachRefs","module","exports"],"sources":["D:/Project_CS/react_side/myapp/node_modules/react-file-viewer/node_modules/react-dom/lib/ReactRef.js"],"sourcesContent":["/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\n'use strict';\n\nvar ReactOwner = require('./ReactOwner');\n\nvar ReactRef = {};\n\nfunction attachRef(ref, component, owner) {\n  if (typeof ref === 'function') {\n    ref(component.getPublicInstance());\n  } else {\n    // Legacy ref\n    ReactOwner.addComponentAsRefTo(component, ref, owner);\n  }\n}\n\nfunction detachRef(ref, component, owner) {\n  if (typeof ref === 'function') {\n    ref(null);\n  } else {\n    // Legacy ref\n    ReactOwner.removeComponentAsRefFrom(component, ref, owner);\n  }\n}\n\nReactRef.attachRefs = function (instance, element) {\n  if (element === null || typeof element !== 'object') {\n    return;\n  }\n  var ref = element.ref;\n  if (ref != null) {\n    attachRef(ref, instance, element._owner);\n  }\n};\n\nReactRef.shouldUpdateRefs = function (prevElement, nextElement) {\n  // If either the owner or a `ref` has changed, make sure the newest owner\n  // has stored a reference to `this`, and the previous owner (if different)\n  // has forgotten the reference to `this`. We use the element instead\n  // of the public this.props because the post processing cannot determine\n  // a ref. The ref conceptually lives on the element.\n\n  // TODO: Should this even be possible? The owner cannot change because\n  // it's forbidden by shouldUpdateReactComponent. The ref can change\n  // if you swap the keys of but not the refs. Reconsider where this check\n  // is made. It probably belongs where the key checking and\n  // instantiateReactComponent is done.\n\n  var prevRef = null;\n  var prevOwner = null;\n  if (prevElement !== null && typeof prevElement === 'object') {\n    prevRef = prevElement.ref;\n    prevOwner = prevElement._owner;\n  }\n\n  var nextRef = null;\n  var nextOwner = null;\n  if (nextElement !== null && typeof nextElement === 'object') {\n    nextRef = nextElement.ref;\n    nextOwner = nextElement._owner;\n  }\n\n  return prevRef !== nextRef ||\n  // If owner changes but we have an unchanged function ref, don't update refs\n  typeof nextRef === 'string' && nextOwner !== prevOwner;\n};\n\nReactRef.detachRefs = function (instance, element) {\n  if (element === null || typeof element !== 'object') {\n    return;\n  }\n  var ref = element.ref;\n  if (ref != null) {\n    detachRef(ref, instance, element._owner);\n  }\n};\n\nmodule.exports = ReactRef;"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ,IAAIA,UAAU,GAAGC,OAAO,CAAC,cAAc,CAAC;AAExC,IAAIC,QAAQ,GAAG,CAAC,CAAC;AAEjB,SAASC,SAASA,CAACC,GAAG,EAAEC,SAAS,EAAEC,KAAK,EAAE;EACxC,IAAI,OAAOF,GAAG,KAAK,UAAU,EAAE;IAC7BA,GAAG,CAACC,SAAS,CAACE,iBAAiB,CAAC,CAAC,CAAC;EACpC,CAAC,MAAM;IACL;IACAP,UAAU,CAACQ,mBAAmB,CAACH,SAAS,EAAED,GAAG,EAAEE,KAAK,CAAC;EACvD;AACF;AAEA,SAASG,SAASA,CAACL,GAAG,EAAEC,SAAS,EAAEC,KAAK,EAAE;EACxC,IAAI,OAAOF,GAAG,KAAK,UAAU,EAAE;IAC7BA,GAAG,CAAC,IAAI,CAAC;EACX,CAAC,MAAM;IACL;IACAJ,UAAU,CAACU,wBAAwB,CAACL,SAAS,EAAED,GAAG,EAAEE,KAAK,CAAC;EAC5D;AACF;AAEAJ,QAAQ,CAACS,UAAU,GAAG,UAAUC,QAAQ,EAAEC,OAAO,EAAE;EACjD,IAAIA,OAAO,KAAK,IAAI,IAAI,OAAOA,OAAO,KAAK,QAAQ,EAAE;IACnD;EACF;EACA,IAAIT,GAAG,GAAGS,OAAO,CAACT,GAAG;EACrB,IAAIA,GAAG,IAAI,IAAI,EAAE;IACfD,SAAS,CAACC,GAAG,EAAEQ,QAAQ,EAAEC,OAAO,CAACC,MAAM,CAAC;EAC1C;AACF,CAAC;AAEDZ,QAAQ,CAACa,gBAAgB,GAAG,UAAUC,WAAW,EAAEC,WAAW,EAAE;EAC9D;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;;EAEA,IAAIC,OAAO,GAAG,IAAI;EAClB,IAAIC,SAAS,GAAG,IAAI;EACpB,IAAIH,WAAW,KAAK,IAAI,IAAI,OAAOA,WAAW,KAAK,QAAQ,EAAE;IAC3DE,OAAO,GAAGF,WAAW,CAACZ,GAAG;IACzBe,SAAS,GAAGH,WAAW,CAACF,MAAM;EAChC;EAEA,IAAIM,OAAO,GAAG,IAAI;EAClB,IAAIC,SAAS,GAAG,IAAI;EACpB,IAAIJ,WAAW,KAAK,IAAI,IAAI,OAAOA,WAAW,KAAK,QAAQ,EAAE;IAC3DG,OAAO,GAAGH,WAAW,CAACb,GAAG;IACzBiB,SAAS,GAAGJ,WAAW,CAACH,MAAM;EAChC;EAEA,OAAOI,OAAO,KAAKE,OAAO;EAC1B;EACA,OAAOA,OAAO,KAAK,QAAQ,IAAIC,SAAS,KAAKF,SAAS;AACxD,CAAC;AAEDjB,QAAQ,CAACoB,UAAU,GAAG,UAAUV,QAAQ,EAAEC,OAAO,EAAE;EACjD,IAAIA,OAAO,KAAK,IAAI,IAAI,OAAOA,OAAO,KAAK,QAAQ,EAAE;IACnD;EACF;EACA,IAAIT,GAAG,GAAGS,OAAO,CAACT,GAAG;EACrB,IAAIA,GAAG,IAAI,IAAI,EAAE;IACfK,SAAS,CAACL,GAAG,EAAEQ,QAAQ,EAAEC,OAAO,CAACC,MAAM,CAAC;EAC1C;AACF,CAAC;AAEDS,MAAM,CAACC,OAAO,GAAGtB,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}