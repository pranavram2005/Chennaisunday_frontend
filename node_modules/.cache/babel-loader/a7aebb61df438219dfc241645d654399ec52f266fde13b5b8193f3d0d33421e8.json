{"ast":null,"code":"/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n'use strict';\n\nvar _prodInvariant = require('./reactProdInvariant');\nvar invariant = require('fbjs/lib/invariant');\nvar genericComponentClass = null;\nvar textComponentClass = null;\nvar ReactHostComponentInjection = {\n  // This accepts a class that receives the tag string. This is a catch all\n  // that can render any kind of tag.\n  injectGenericComponentClass: function (componentClass) {\n    genericComponentClass = componentClass;\n  },\n  // This accepts a text component class that takes the text string to be\n  // rendered as props.\n  injectTextComponentClass: function (componentClass) {\n    textComponentClass = componentClass;\n  }\n};\n\n/**\n * Get a host internal component class for a specific tag.\n *\n * @param {ReactElement} element The element to create.\n * @return {function} The internal class constructor function.\n */\nfunction createInternalComponent(element) {\n  !genericComponentClass ? process.env.NODE_ENV !== 'production' ? invariant(false, 'There is no registered component for the tag %s', element.type) : _prodInvariant('111', element.type) : void 0;\n  return new genericComponentClass(element);\n}\n\n/**\n * @param {ReactText} text\n * @return {ReactComponent}\n */\nfunction createInstanceForText(text) {\n  return new textComponentClass(text);\n}\n\n/**\n * @param {ReactComponent} component\n * @return {boolean}\n */\nfunction isTextComponent(component) {\n  return component instanceof textComponentClass;\n}\nvar ReactHostComponent = {\n  createInternalComponent: createInternalComponent,\n  createInstanceForText: createInstanceForText,\n  isTextComponent: isTextComponent,\n  injection: ReactHostComponentInjection\n};\nmodule.exports = ReactHostComponent;","map":{"version":3,"names":["_prodInvariant","require","invariant","genericComponentClass","textComponentClass","ReactHostComponentInjection","injectGenericComponentClass","componentClass","injectTextComponentClass","createInternalComponent","element","process","env","NODE_ENV","type","createInstanceForText","text","isTextComponent","component","ReactHostComponent","injection","module","exports"],"sources":["D:/Project_CS/react_side/myapp/node_modules/react-file-viewer/node_modules/react-dom/lib/ReactHostComponent.js"],"sourcesContent":["/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n'use strict';\n\nvar _prodInvariant = require('./reactProdInvariant');\n\nvar invariant = require('fbjs/lib/invariant');\n\nvar genericComponentClass = null;\nvar textComponentClass = null;\n\nvar ReactHostComponentInjection = {\n  // This accepts a class that receives the tag string. This is a catch all\n  // that can render any kind of tag.\n  injectGenericComponentClass: function (componentClass) {\n    genericComponentClass = componentClass;\n  },\n  // This accepts a text component class that takes the text string to be\n  // rendered as props.\n  injectTextComponentClass: function (componentClass) {\n    textComponentClass = componentClass;\n  }\n};\n\n/**\n * Get a host internal component class for a specific tag.\n *\n * @param {ReactElement} element The element to create.\n * @return {function} The internal class constructor function.\n */\nfunction createInternalComponent(element) {\n  !genericComponentClass ? process.env.NODE_ENV !== 'production' ? invariant(false, 'There is no registered component for the tag %s', element.type) : _prodInvariant('111', element.type) : void 0;\n  return new genericComponentClass(element);\n}\n\n/**\n * @param {ReactText} text\n * @return {ReactComponent}\n */\nfunction createInstanceForText(text) {\n  return new textComponentClass(text);\n}\n\n/**\n * @param {ReactComponent} component\n * @return {boolean}\n */\nfunction isTextComponent(component) {\n  return component instanceof textComponentClass;\n}\n\nvar ReactHostComponent = {\n  createInternalComponent: createInternalComponent,\n  createInstanceForText: createInstanceForText,\n  isTextComponent: isTextComponent,\n  injection: ReactHostComponentInjection\n};\n\nmodule.exports = ReactHostComponent;"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ,IAAIA,cAAc,GAAGC,OAAO,CAAC,sBAAsB,CAAC;AAEpD,IAAIC,SAAS,GAAGD,OAAO,CAAC,oBAAoB,CAAC;AAE7C,IAAIE,qBAAqB,GAAG,IAAI;AAChC,IAAIC,kBAAkB,GAAG,IAAI;AAE7B,IAAIC,2BAA2B,GAAG;EAChC;EACA;EACAC,2BAA2B,EAAE,SAAAA,CAAUC,cAAc,EAAE;IACrDJ,qBAAqB,GAAGI,cAAc;EACxC,CAAC;EACD;EACA;EACAC,wBAAwB,EAAE,SAAAA,CAAUD,cAAc,EAAE;IAClDH,kBAAkB,GAAGG,cAAc;EACrC;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,SAASE,uBAAuBA,CAACC,OAAO,EAAE;EACxC,CAACP,qBAAqB,GAAGQ,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,GAAGX,SAAS,CAAC,KAAK,EAAE,iDAAiD,EAAEQ,OAAO,CAACI,IAAI,CAAC,GAAGd,cAAc,CAAC,KAAK,EAAEU,OAAO,CAACI,IAAI,CAAC,GAAG,KAAK,CAAC;EACjM,OAAO,IAAIX,qBAAqB,CAACO,OAAO,CAAC;AAC3C;;AAEA;AACA;AACA;AACA;AACA,SAASK,qBAAqBA,CAACC,IAAI,EAAE;EACnC,OAAO,IAAIZ,kBAAkB,CAACY,IAAI,CAAC;AACrC;;AAEA;AACA;AACA;AACA;AACA,SAASC,eAAeA,CAACC,SAAS,EAAE;EAClC,OAAOA,SAAS,YAAYd,kBAAkB;AAChD;AAEA,IAAIe,kBAAkB,GAAG;EACvBV,uBAAuB,EAAEA,uBAAuB;EAChDM,qBAAqB,EAAEA,qBAAqB;EAC5CE,eAAe,EAAEA,eAAe;EAChCG,SAAS,EAAEf;AACb,CAAC;AAEDgB,MAAM,CAACC,OAAO,GAAGH,kBAAkB","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}