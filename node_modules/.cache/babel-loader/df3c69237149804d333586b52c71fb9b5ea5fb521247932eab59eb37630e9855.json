{"ast":null,"code":"/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n'use strict';\n\nvar _prodInvariant = require('./reactProdInvariant'),\n  _assign = require('object-assign');\nvar DOMPropertyOperations = require('./DOMPropertyOperations');\nvar LinkedValueUtils = require('./LinkedValueUtils');\nvar ReactDOMComponentTree = require('./ReactDOMComponentTree');\nvar ReactUpdates = require('./ReactUpdates');\nvar invariant = require('fbjs/lib/invariant');\nvar warning = require('fbjs/lib/warning');\nvar didWarnValueLink = false;\nvar didWarnCheckedLink = false;\nvar didWarnValueDefaultValue = false;\nvar didWarnCheckedDefaultChecked = false;\nvar didWarnControlledToUncontrolled = false;\nvar didWarnUncontrolledToControlled = false;\nfunction forceUpdateIfMounted() {\n  if (this._rootNodeID) {\n    // DOM component is still mounted; update\n    ReactDOMInput.updateWrapper(this);\n  }\n}\nfunction isControlled(props) {\n  var usesChecked = props.type === 'checkbox' || props.type === 'radio';\n  return usesChecked ? props.checked != null : props.value != null;\n}\n\n/**\n * Implements an <input> host component that allows setting these optional\n * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.\n *\n * If `checked` or `value` are not supplied (or null/undefined), user actions\n * that affect the checked state or value will trigger updates to the element.\n *\n * If they are supplied (and not null/undefined), the rendered element will not\n * trigger updates to the element. Instead, the props must change in order for\n * the rendered element to be updated.\n *\n * The rendered element will be initialized as unchecked (or `defaultChecked`)\n * with an empty value (or `defaultValue`).\n *\n * @see http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html\n */\nvar ReactDOMInput = {\n  getHostProps: function (inst, props) {\n    var value = LinkedValueUtils.getValue(props);\n    var checked = LinkedValueUtils.getChecked(props);\n    var hostProps = _assign({\n      // Make sure we set .type before any other properties (setting .value\n      // before .type means .value is lost in IE11 and below)\n      type: undefined,\n      // Make sure we set .step before .value (setting .value before .step\n      // means .value is rounded on mount, based upon step precision)\n      step: undefined,\n      // Make sure we set .min & .max before .value (to ensure proper order\n      // in corner cases such as min or max deriving from value, e.g. Issue #7170)\n      min: undefined,\n      max: undefined\n    }, props, {\n      defaultChecked: undefined,\n      defaultValue: undefined,\n      value: value != null ? value : inst._wrapperState.initialValue,\n      checked: checked != null ? checked : inst._wrapperState.initialChecked,\n      onChange: inst._wrapperState.onChange\n    });\n    return hostProps;\n  },\n  mountWrapper: function (inst, props) {\n    if (process.env.NODE_ENV !== 'production') {\n      LinkedValueUtils.checkPropTypes('input', props, inst._currentElement._owner);\n      var owner = inst._currentElement._owner;\n      if (props.valueLink !== undefined && !didWarnValueLink) {\n        process.env.NODE_ENV !== 'production' ? warning(false, '`valueLink` prop on `input` is deprecated; set `value` and `onChange` instead.') : void 0;\n        didWarnValueLink = true;\n      }\n      if (props.checkedLink !== undefined && !didWarnCheckedLink) {\n        process.env.NODE_ENV !== 'production' ? warning(false, '`checkedLink` prop on `input` is deprecated; set `value` and `onChange` instead.') : void 0;\n        didWarnCheckedLink = true;\n      }\n      if (props.checked !== undefined && props.defaultChecked !== undefined && !didWarnCheckedDefaultChecked) {\n        process.env.NODE_ENV !== 'production' ? warning(false, '%s contains an input of type %s with both checked and defaultChecked props. ' + 'Input elements must be either controlled or uncontrolled ' + '(specify either the checked prop, or the defaultChecked prop, but not ' + 'both). Decide between using a controlled or uncontrolled input ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components', owner && owner.getName() || 'A component', props.type) : void 0;\n        didWarnCheckedDefaultChecked = true;\n      }\n      if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue) {\n        process.env.NODE_ENV !== 'production' ? warning(false, '%s contains an input of type %s with both value and defaultValue props. ' + 'Input elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled input ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components', owner && owner.getName() || 'A component', props.type) : void 0;\n        didWarnValueDefaultValue = true;\n      }\n    }\n    var defaultValue = props.defaultValue;\n    inst._wrapperState = {\n      initialChecked: props.checked != null ? props.checked : props.defaultChecked,\n      initialValue: props.value != null ? props.value : defaultValue,\n      listeners: null,\n      onChange: _handleChange.bind(inst),\n      controlled: isControlled(props)\n    };\n  },\n  updateWrapper: function (inst) {\n    var props = inst._currentElement.props;\n    if (process.env.NODE_ENV !== 'production') {\n      var controlled = isControlled(props);\n      var owner = inst._currentElement._owner;\n      if (!inst._wrapperState.controlled && controlled && !didWarnUncontrolledToControlled) {\n        process.env.NODE_ENV !== 'production' ? warning(false, '%s is changing an uncontrolled input of type %s to be controlled. ' + 'Input elements should not switch from uncontrolled to controlled (or vice versa). ' + 'Decide between using a controlled or uncontrolled input ' + 'element for the lifetime of the component. More info: https://fb.me/react-controlled-components', owner && owner.getName() || 'A component', props.type) : void 0;\n        didWarnUncontrolledToControlled = true;\n      }\n      if (inst._wrapperState.controlled && !controlled && !didWarnControlledToUncontrolled) {\n        process.env.NODE_ENV !== 'production' ? warning(false, '%s is changing a controlled input of type %s to be uncontrolled. ' + 'Input elements should not switch from controlled to uncontrolled (or vice versa). ' + 'Decide between using a controlled or uncontrolled input ' + 'element for the lifetime of the component. More info: https://fb.me/react-controlled-components', owner && owner.getName() || 'A component', props.type) : void 0;\n        didWarnControlledToUncontrolled = true;\n      }\n    }\n\n    // TODO: Shouldn't this be getChecked(props)?\n    var checked = props.checked;\n    if (checked != null) {\n      DOMPropertyOperations.setValueForProperty(ReactDOMComponentTree.getNodeFromInstance(inst), 'checked', checked || false);\n    }\n    var node = ReactDOMComponentTree.getNodeFromInstance(inst);\n    var value = LinkedValueUtils.getValue(props);\n    if (value != null) {\n      if (value === 0 && node.value === '') {\n        node.value = '0';\n        // Note: IE9 reports a number inputs as 'text', so check props instead.\n      } else if (props.type === 'number') {\n        // Simulate `input.valueAsNumber`. IE9 does not support it\n        var valueAsNumber = parseFloat(node.value, 10) || 0;\n        if (\n        // eslint-disable-next-line\n        value != valueAsNumber ||\n        // eslint-disable-next-line\n        value == valueAsNumber && node.value != value) {\n          // Cast `value` to a string to ensure the value is set correctly. While\n          // browsers typically do this as necessary, jsdom doesn't.\n          node.value = '' + value;\n        }\n      } else if (node.value !== '' + value) {\n        // Cast `value` to a string to ensure the value is set correctly. While\n        // browsers typically do this as necessary, jsdom doesn't.\n        node.value = '' + value;\n      }\n    } else {\n      if (props.value == null && props.defaultValue != null) {\n        // In Chrome, assigning defaultValue to certain input types triggers input validation.\n        // For number inputs, the display value loses trailing decimal points. For email inputs,\n        // Chrome raises \"The specified value <x> is not a valid email address\".\n        //\n        // Here we check to see if the defaultValue has actually changed, avoiding these problems\n        // when the user is inputting text\n        //\n        // https://github.com/facebook/react/issues/7253\n        if (node.defaultValue !== '' + props.defaultValue) {\n          node.defaultValue = '' + props.defaultValue;\n        }\n      }\n      if (props.checked == null && props.defaultChecked != null) {\n        node.defaultChecked = !!props.defaultChecked;\n      }\n    }\n  },\n  postMountWrapper: function (inst) {\n    var props = inst._currentElement.props;\n\n    // This is in postMount because we need access to the DOM node, which is not\n    // available until after the component has mounted.\n    var node = ReactDOMComponentTree.getNodeFromInstance(inst);\n\n    // Detach value from defaultValue. We won't do anything if we're working on\n    // submit or reset inputs as those values & defaultValues are linked. They\n    // are not resetable nodes so this operation doesn't matter and actually\n    // removes browser-default values (eg \"Submit Query\") when no value is\n    // provided.\n\n    switch (props.type) {\n      case 'submit':\n      case 'reset':\n        break;\n      case 'color':\n      case 'date':\n      case 'datetime':\n      case 'datetime-local':\n      case 'month':\n      case 'time':\n      case 'week':\n        // This fixes the no-show issue on iOS Safari and Android Chrome:\n        // https://github.com/facebook/react/issues/7233\n        node.value = '';\n        node.value = node.defaultValue;\n        break;\n      default:\n        node.value = node.value;\n        break;\n    }\n\n    // Normally, we'd just do `node.checked = node.checked` upon initial mount, less this bug\n    // this is needed to work around a chrome bug where setting defaultChecked\n    // will sometimes influence the value of checked (even after detachment).\n    // Reference: https://bugs.chromium.org/p/chromium/issues/detail?id=608416\n    // We need to temporarily unset name to avoid disrupting radio button groups.\n    var name = node.name;\n    if (name !== '') {\n      node.name = '';\n    }\n    node.defaultChecked = !node.defaultChecked;\n    node.defaultChecked = !node.defaultChecked;\n    if (name !== '') {\n      node.name = name;\n    }\n  }\n};\nfunction _handleChange(event) {\n  var props = this._currentElement.props;\n  var returnValue = LinkedValueUtils.executeOnChange(props, event);\n\n  // Here we use asap to wait until all updates have propagated, which\n  // is important when using controlled components within layers:\n  // https://github.com/facebook/react/issues/1698\n  ReactUpdates.asap(forceUpdateIfMounted, this);\n  var name = props.name;\n  if (props.type === 'radio' && name != null) {\n    var rootNode = ReactDOMComponentTree.getNodeFromInstance(this);\n    var queryRoot = rootNode;\n    while (queryRoot.parentNode) {\n      queryRoot = queryRoot.parentNode;\n    }\n\n    // If `rootNode.form` was non-null, then we could try `form.elements`,\n    // but that sometimes behaves strangely in IE8. We could also try using\n    // `form.getElementsByName`, but that will only return direct children\n    // and won't include inputs that use the HTML5 `form=` attribute. Since\n    // the input might not even be in a form, let's just use the global\n    // `querySelectorAll` to ensure we don't miss anything.\n    var group = queryRoot.querySelectorAll('input[name=' + JSON.stringify('' + name) + '][type=\"radio\"]');\n    for (var i = 0; i < group.length; i++) {\n      var otherNode = group[i];\n      if (otherNode === rootNode || otherNode.form !== rootNode.form) {\n        continue;\n      }\n      // This will throw if radio buttons rendered by different copies of React\n      // and the same name are rendered into the same form (same as #1939).\n      // That's probably okay; we don't support it just as we don't support\n      // mixing React radio buttons with non-React ones.\n      var otherInstance = ReactDOMComponentTree.getInstanceFromNode(otherNode);\n      !otherInstance ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.') : _prodInvariant('90') : void 0;\n      // If this is a controlled radio button group, forcing the input that\n      // was previously checked to update will cause it to be come re-checked\n      // as appropriate.\n      ReactUpdates.asap(forceUpdateIfMounted, otherInstance);\n    }\n  }\n  return returnValue;\n}\nmodule.exports = ReactDOMInput;","map":{"version":3,"names":["_prodInvariant","require","_assign","DOMPropertyOperations","LinkedValueUtils","ReactDOMComponentTree","ReactUpdates","invariant","warning","didWarnValueLink","didWarnCheckedLink","didWarnValueDefaultValue","didWarnCheckedDefaultChecked","didWarnControlledToUncontrolled","didWarnUncontrolledToControlled","forceUpdateIfMounted","_rootNodeID","ReactDOMInput","updateWrapper","isControlled","props","usesChecked","type","checked","value","getHostProps","inst","getValue","getChecked","hostProps","undefined","step","min","max","defaultChecked","defaultValue","_wrapperState","initialValue","initialChecked","onChange","mountWrapper","process","env","NODE_ENV","checkPropTypes","_currentElement","_owner","owner","valueLink","checkedLink","getName","listeners","_handleChange","bind","controlled","setValueForProperty","getNodeFromInstance","node","valueAsNumber","parseFloat","postMountWrapper","name","event","returnValue","executeOnChange","asap","rootNode","queryRoot","parentNode","group","querySelectorAll","JSON","stringify","i","length","otherNode","form","otherInstance","getInstanceFromNode","module","exports"],"sources":["D:/Project_CS/react_side/myapp/node_modules/react-file-viewer/node_modules/react-dom/lib/ReactDOMInput.js"],"sourcesContent":["/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n'use strict';\n\nvar _prodInvariant = require('./reactProdInvariant'),\n    _assign = require('object-assign');\n\nvar DOMPropertyOperations = require('./DOMPropertyOperations');\nvar LinkedValueUtils = require('./LinkedValueUtils');\nvar ReactDOMComponentTree = require('./ReactDOMComponentTree');\nvar ReactUpdates = require('./ReactUpdates');\n\nvar invariant = require('fbjs/lib/invariant');\nvar warning = require('fbjs/lib/warning');\n\nvar didWarnValueLink = false;\nvar didWarnCheckedLink = false;\nvar didWarnValueDefaultValue = false;\nvar didWarnCheckedDefaultChecked = false;\nvar didWarnControlledToUncontrolled = false;\nvar didWarnUncontrolledToControlled = false;\n\nfunction forceUpdateIfMounted() {\n  if (this._rootNodeID) {\n    // DOM component is still mounted; update\n    ReactDOMInput.updateWrapper(this);\n  }\n}\n\nfunction isControlled(props) {\n  var usesChecked = props.type === 'checkbox' || props.type === 'radio';\n  return usesChecked ? props.checked != null : props.value != null;\n}\n\n/**\n * Implements an <input> host component that allows setting these optional\n * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.\n *\n * If `checked` or `value` are not supplied (or null/undefined), user actions\n * that affect the checked state or value will trigger updates to the element.\n *\n * If they are supplied (and not null/undefined), the rendered element will not\n * trigger updates to the element. Instead, the props must change in order for\n * the rendered element to be updated.\n *\n * The rendered element will be initialized as unchecked (or `defaultChecked`)\n * with an empty value (or `defaultValue`).\n *\n * @see http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html\n */\nvar ReactDOMInput = {\n  getHostProps: function (inst, props) {\n    var value = LinkedValueUtils.getValue(props);\n    var checked = LinkedValueUtils.getChecked(props);\n\n    var hostProps = _assign({\n      // Make sure we set .type before any other properties (setting .value\n      // before .type means .value is lost in IE11 and below)\n      type: undefined,\n      // Make sure we set .step before .value (setting .value before .step\n      // means .value is rounded on mount, based upon step precision)\n      step: undefined,\n      // Make sure we set .min & .max before .value (to ensure proper order\n      // in corner cases such as min or max deriving from value, e.g. Issue #7170)\n      min: undefined,\n      max: undefined\n    }, props, {\n      defaultChecked: undefined,\n      defaultValue: undefined,\n      value: value != null ? value : inst._wrapperState.initialValue,\n      checked: checked != null ? checked : inst._wrapperState.initialChecked,\n      onChange: inst._wrapperState.onChange\n    });\n\n    return hostProps;\n  },\n\n  mountWrapper: function (inst, props) {\n    if (process.env.NODE_ENV !== 'production') {\n      LinkedValueUtils.checkPropTypes('input', props, inst._currentElement._owner);\n\n      var owner = inst._currentElement._owner;\n\n      if (props.valueLink !== undefined && !didWarnValueLink) {\n        process.env.NODE_ENV !== 'production' ? warning(false, '`valueLink` prop on `input` is deprecated; set `value` and `onChange` instead.') : void 0;\n        didWarnValueLink = true;\n      }\n      if (props.checkedLink !== undefined && !didWarnCheckedLink) {\n        process.env.NODE_ENV !== 'production' ? warning(false, '`checkedLink` prop on `input` is deprecated; set `value` and `onChange` instead.') : void 0;\n        didWarnCheckedLink = true;\n      }\n      if (props.checked !== undefined && props.defaultChecked !== undefined && !didWarnCheckedDefaultChecked) {\n        process.env.NODE_ENV !== 'production' ? warning(false, '%s contains an input of type %s with both checked and defaultChecked props. ' + 'Input elements must be either controlled or uncontrolled ' + '(specify either the checked prop, or the defaultChecked prop, but not ' + 'both). Decide between using a controlled or uncontrolled input ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components', owner && owner.getName() || 'A component', props.type) : void 0;\n        didWarnCheckedDefaultChecked = true;\n      }\n      if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue) {\n        process.env.NODE_ENV !== 'production' ? warning(false, '%s contains an input of type %s with both value and defaultValue props. ' + 'Input elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled input ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components', owner && owner.getName() || 'A component', props.type) : void 0;\n        didWarnValueDefaultValue = true;\n      }\n    }\n\n    var defaultValue = props.defaultValue;\n    inst._wrapperState = {\n      initialChecked: props.checked != null ? props.checked : props.defaultChecked,\n      initialValue: props.value != null ? props.value : defaultValue,\n      listeners: null,\n      onChange: _handleChange.bind(inst),\n      controlled: isControlled(props)\n    };\n  },\n\n  updateWrapper: function (inst) {\n    var props = inst._currentElement.props;\n\n    if (process.env.NODE_ENV !== 'production') {\n      var controlled = isControlled(props);\n      var owner = inst._currentElement._owner;\n\n      if (!inst._wrapperState.controlled && controlled && !didWarnUncontrolledToControlled) {\n        process.env.NODE_ENV !== 'production' ? warning(false, '%s is changing an uncontrolled input of type %s to be controlled. ' + 'Input elements should not switch from uncontrolled to controlled (or vice versa). ' + 'Decide between using a controlled or uncontrolled input ' + 'element for the lifetime of the component. More info: https://fb.me/react-controlled-components', owner && owner.getName() || 'A component', props.type) : void 0;\n        didWarnUncontrolledToControlled = true;\n      }\n      if (inst._wrapperState.controlled && !controlled && !didWarnControlledToUncontrolled) {\n        process.env.NODE_ENV !== 'production' ? warning(false, '%s is changing a controlled input of type %s to be uncontrolled. ' + 'Input elements should not switch from controlled to uncontrolled (or vice versa). ' + 'Decide between using a controlled or uncontrolled input ' + 'element for the lifetime of the component. More info: https://fb.me/react-controlled-components', owner && owner.getName() || 'A component', props.type) : void 0;\n        didWarnControlledToUncontrolled = true;\n      }\n    }\n\n    // TODO: Shouldn't this be getChecked(props)?\n    var checked = props.checked;\n    if (checked != null) {\n      DOMPropertyOperations.setValueForProperty(ReactDOMComponentTree.getNodeFromInstance(inst), 'checked', checked || false);\n    }\n\n    var node = ReactDOMComponentTree.getNodeFromInstance(inst);\n    var value = LinkedValueUtils.getValue(props);\n    if (value != null) {\n      if (value === 0 && node.value === '') {\n        node.value = '0';\n        // Note: IE9 reports a number inputs as 'text', so check props instead.\n      } else if (props.type === 'number') {\n        // Simulate `input.valueAsNumber`. IE9 does not support it\n        var valueAsNumber = parseFloat(node.value, 10) || 0;\n\n        if (\n        // eslint-disable-next-line\n        value != valueAsNumber ||\n        // eslint-disable-next-line\n        value == valueAsNumber && node.value != value) {\n          // Cast `value` to a string to ensure the value is set correctly. While\n          // browsers typically do this as necessary, jsdom doesn't.\n          node.value = '' + value;\n        }\n      } else if (node.value !== '' + value) {\n        // Cast `value` to a string to ensure the value is set correctly. While\n        // browsers typically do this as necessary, jsdom doesn't.\n        node.value = '' + value;\n      }\n    } else {\n      if (props.value == null && props.defaultValue != null) {\n        // In Chrome, assigning defaultValue to certain input types triggers input validation.\n        // For number inputs, the display value loses trailing decimal points. For email inputs,\n        // Chrome raises \"The specified value <x> is not a valid email address\".\n        //\n        // Here we check to see if the defaultValue has actually changed, avoiding these problems\n        // when the user is inputting text\n        //\n        // https://github.com/facebook/react/issues/7253\n        if (node.defaultValue !== '' + props.defaultValue) {\n          node.defaultValue = '' + props.defaultValue;\n        }\n      }\n      if (props.checked == null && props.defaultChecked != null) {\n        node.defaultChecked = !!props.defaultChecked;\n      }\n    }\n  },\n\n  postMountWrapper: function (inst) {\n    var props = inst._currentElement.props;\n\n    // This is in postMount because we need access to the DOM node, which is not\n    // available until after the component has mounted.\n    var node = ReactDOMComponentTree.getNodeFromInstance(inst);\n\n    // Detach value from defaultValue. We won't do anything if we're working on\n    // submit or reset inputs as those values & defaultValues are linked. They\n    // are not resetable nodes so this operation doesn't matter and actually\n    // removes browser-default values (eg \"Submit Query\") when no value is\n    // provided.\n\n    switch (props.type) {\n      case 'submit':\n      case 'reset':\n        break;\n      case 'color':\n      case 'date':\n      case 'datetime':\n      case 'datetime-local':\n      case 'month':\n      case 'time':\n      case 'week':\n        // This fixes the no-show issue on iOS Safari and Android Chrome:\n        // https://github.com/facebook/react/issues/7233\n        node.value = '';\n        node.value = node.defaultValue;\n        break;\n      default:\n        node.value = node.value;\n        break;\n    }\n\n    // Normally, we'd just do `node.checked = node.checked` upon initial mount, less this bug\n    // this is needed to work around a chrome bug where setting defaultChecked\n    // will sometimes influence the value of checked (even after detachment).\n    // Reference: https://bugs.chromium.org/p/chromium/issues/detail?id=608416\n    // We need to temporarily unset name to avoid disrupting radio button groups.\n    var name = node.name;\n    if (name !== '') {\n      node.name = '';\n    }\n    node.defaultChecked = !node.defaultChecked;\n    node.defaultChecked = !node.defaultChecked;\n    if (name !== '') {\n      node.name = name;\n    }\n  }\n};\n\nfunction _handleChange(event) {\n  var props = this._currentElement.props;\n\n  var returnValue = LinkedValueUtils.executeOnChange(props, event);\n\n  // Here we use asap to wait until all updates have propagated, which\n  // is important when using controlled components within layers:\n  // https://github.com/facebook/react/issues/1698\n  ReactUpdates.asap(forceUpdateIfMounted, this);\n\n  var name = props.name;\n  if (props.type === 'radio' && name != null) {\n    var rootNode = ReactDOMComponentTree.getNodeFromInstance(this);\n    var queryRoot = rootNode;\n\n    while (queryRoot.parentNode) {\n      queryRoot = queryRoot.parentNode;\n    }\n\n    // If `rootNode.form` was non-null, then we could try `form.elements`,\n    // but that sometimes behaves strangely in IE8. We could also try using\n    // `form.getElementsByName`, but that will only return direct children\n    // and won't include inputs that use the HTML5 `form=` attribute. Since\n    // the input might not even be in a form, let's just use the global\n    // `querySelectorAll` to ensure we don't miss anything.\n    var group = queryRoot.querySelectorAll('input[name=' + JSON.stringify('' + name) + '][type=\"radio\"]');\n\n    for (var i = 0; i < group.length; i++) {\n      var otherNode = group[i];\n      if (otherNode === rootNode || otherNode.form !== rootNode.form) {\n        continue;\n      }\n      // This will throw if radio buttons rendered by different copies of React\n      // and the same name are rendered into the same form (same as #1939).\n      // That's probably okay; we don't support it just as we don't support\n      // mixing React radio buttons with non-React ones.\n      var otherInstance = ReactDOMComponentTree.getInstanceFromNode(otherNode);\n      !otherInstance ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.') : _prodInvariant('90') : void 0;\n      // If this is a controlled radio button group, forcing the input that\n      // was previously checked to update will cause it to be come re-checked\n      // as appropriate.\n      ReactUpdates.asap(forceUpdateIfMounted, otherInstance);\n    }\n  }\n\n  return returnValue;\n}\n\nmodule.exports = ReactDOMInput;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}