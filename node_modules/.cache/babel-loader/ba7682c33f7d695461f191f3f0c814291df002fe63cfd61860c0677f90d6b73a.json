{"ast":null,"code":"/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n'use strict';\n\nvar _assign = require('object-assign');\nvar ReactUpdates = require('./ReactUpdates');\nvar Transaction = require('./Transaction');\nvar emptyFunction = require('fbjs/lib/emptyFunction');\nvar RESET_BATCHED_UPDATES = {\n  initialize: emptyFunction,\n  close: function () {\n    ReactDefaultBatchingStrategy.isBatchingUpdates = false;\n  }\n};\nvar FLUSH_BATCHED_UPDATES = {\n  initialize: emptyFunction,\n  close: ReactUpdates.flushBatchedUpdates.bind(ReactUpdates)\n};\nvar TRANSACTION_WRAPPERS = [FLUSH_BATCHED_UPDATES, RESET_BATCHED_UPDATES];\nfunction ReactDefaultBatchingStrategyTransaction() {\n  this.reinitializeTransaction();\n}\n_assign(ReactDefaultBatchingStrategyTransaction.prototype, Transaction, {\n  getTransactionWrappers: function () {\n    return TRANSACTION_WRAPPERS;\n  }\n});\nvar transaction = new ReactDefaultBatchingStrategyTransaction();\nvar ReactDefaultBatchingStrategy = {\n  isBatchingUpdates: false,\n  /**\n   * Call the provided function in a context within which calls to `setState`\n   * and friends are batched such that components aren't updated unnecessarily.\n   */\n  batchedUpdates: function (callback, a, b, c, d, e) {\n    var alreadyBatchingUpdates = ReactDefaultBatchingStrategy.isBatchingUpdates;\n    ReactDefaultBatchingStrategy.isBatchingUpdates = true;\n\n    // The code is written this way to avoid extra allocations\n    if (alreadyBatchingUpdates) {\n      return callback(a, b, c, d, e);\n    } else {\n      return transaction.perform(callback, null, a, b, c, d, e);\n    }\n  }\n};\nmodule.exports = ReactDefaultBatchingStrategy;","map":{"version":3,"names":["_assign","require","ReactUpdates","Transaction","emptyFunction","RESET_BATCHED_UPDATES","initialize","close","ReactDefaultBatchingStrategy","isBatchingUpdates","FLUSH_BATCHED_UPDATES","flushBatchedUpdates","bind","TRANSACTION_WRAPPERS","ReactDefaultBatchingStrategyTransaction","reinitializeTransaction","prototype","getTransactionWrappers","transaction","batchedUpdates","callback","a","b","c","d","e","alreadyBatchingUpdates","perform","module","exports"],"sources":["D:/Project_CS/react_side/myapp/node_modules/react-file-viewer/node_modules/react-dom/lib/ReactDefaultBatchingStrategy.js"],"sourcesContent":["/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n'use strict';\n\nvar _assign = require('object-assign');\n\nvar ReactUpdates = require('./ReactUpdates');\nvar Transaction = require('./Transaction');\n\nvar emptyFunction = require('fbjs/lib/emptyFunction');\n\nvar RESET_BATCHED_UPDATES = {\n  initialize: emptyFunction,\n  close: function () {\n    ReactDefaultBatchingStrategy.isBatchingUpdates = false;\n  }\n};\n\nvar FLUSH_BATCHED_UPDATES = {\n  initialize: emptyFunction,\n  close: ReactUpdates.flushBatchedUpdates.bind(ReactUpdates)\n};\n\nvar TRANSACTION_WRAPPERS = [FLUSH_BATCHED_UPDATES, RESET_BATCHED_UPDATES];\n\nfunction ReactDefaultBatchingStrategyTransaction() {\n  this.reinitializeTransaction();\n}\n\n_assign(ReactDefaultBatchingStrategyTransaction.prototype, Transaction, {\n  getTransactionWrappers: function () {\n    return TRANSACTION_WRAPPERS;\n  }\n});\n\nvar transaction = new ReactDefaultBatchingStrategyTransaction();\n\nvar ReactDefaultBatchingStrategy = {\n  isBatchingUpdates: false,\n\n  /**\n   * Call the provided function in a context within which calls to `setState`\n   * and friends are batched such that components aren't updated unnecessarily.\n   */\n  batchedUpdates: function (callback, a, b, c, d, e) {\n    var alreadyBatchingUpdates = ReactDefaultBatchingStrategy.isBatchingUpdates;\n\n    ReactDefaultBatchingStrategy.isBatchingUpdates = true;\n\n    // The code is written this way to avoid extra allocations\n    if (alreadyBatchingUpdates) {\n      return callback(a, b, c, d, e);\n    } else {\n      return transaction.perform(callback, null, a, b, c, d, e);\n    }\n  }\n};\n\nmodule.exports = ReactDefaultBatchingStrategy;"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ,IAAIA,OAAO,GAAGC,OAAO,CAAC,eAAe,CAAC;AAEtC,IAAIC,YAAY,GAAGD,OAAO,CAAC,gBAAgB,CAAC;AAC5C,IAAIE,WAAW,GAAGF,OAAO,CAAC,eAAe,CAAC;AAE1C,IAAIG,aAAa,GAAGH,OAAO,CAAC,wBAAwB,CAAC;AAErD,IAAII,qBAAqB,GAAG;EAC1BC,UAAU,EAAEF,aAAa;EACzBG,KAAK,EAAE,SAAAA,CAAA,EAAY;IACjBC,4BAA4B,CAACC,iBAAiB,GAAG,KAAK;EACxD;AACF,CAAC;AAED,IAAIC,qBAAqB,GAAG;EAC1BJ,UAAU,EAAEF,aAAa;EACzBG,KAAK,EAAEL,YAAY,CAACS,mBAAmB,CAACC,IAAI,CAACV,YAAY;AAC3D,CAAC;AAED,IAAIW,oBAAoB,GAAG,CAACH,qBAAqB,EAAEL,qBAAqB,CAAC;AAEzE,SAASS,uCAAuCA,CAAA,EAAG;EACjD,IAAI,CAACC,uBAAuB,CAAC,CAAC;AAChC;AAEAf,OAAO,CAACc,uCAAuC,CAACE,SAAS,EAAEb,WAAW,EAAE;EACtEc,sBAAsB,EAAE,SAAAA,CAAA,EAAY;IAClC,OAAOJ,oBAAoB;EAC7B;AACF,CAAC,CAAC;AAEF,IAAIK,WAAW,GAAG,IAAIJ,uCAAuC,CAAC,CAAC;AAE/D,IAAIN,4BAA4B,GAAG;EACjCC,iBAAiB,EAAE,KAAK;EAExB;AACF;AACA;AACA;EACEU,cAAc,EAAE,SAAAA,CAAUC,QAAQ,EAAEC,CAAC,EAAEC,CAAC,EAAEC,CAAC,EAAEC,CAAC,EAAEC,CAAC,EAAE;IACjD,IAAIC,sBAAsB,GAAGlB,4BAA4B,CAACC,iBAAiB;IAE3ED,4BAA4B,CAACC,iBAAiB,GAAG,IAAI;;IAErD;IACA,IAAIiB,sBAAsB,EAAE;MAC1B,OAAON,QAAQ,CAACC,CAAC,EAAEC,CAAC,EAAEC,CAAC,EAAEC,CAAC,EAAEC,CAAC,CAAC;IAChC,CAAC,MAAM;MACL,OAAOP,WAAW,CAACS,OAAO,CAACP,QAAQ,EAAE,IAAI,EAAEC,CAAC,EAAEC,CAAC,EAAEC,CAAC,EAAEC,CAAC,EAAEC,CAAC,CAAC;IAC3D;EACF;AACF,CAAC;AAEDG,MAAM,CAACC,OAAO,GAAGrB,4BAA4B","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}