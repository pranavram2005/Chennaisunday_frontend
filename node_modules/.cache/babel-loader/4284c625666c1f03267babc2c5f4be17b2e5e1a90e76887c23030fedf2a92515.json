{"ast":null,"code":"/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n'use strict';\n\nvar _prodInvariant = require('./reactProdInvariant'),\n  _assign = require('object-assign');\nvar DOMChildrenOperations = require('./DOMChildrenOperations');\nvar DOMLazyTree = require('./DOMLazyTree');\nvar ReactDOMComponentTree = require('./ReactDOMComponentTree');\nvar escapeTextContentForBrowser = require('./escapeTextContentForBrowser');\nvar invariant = require('fbjs/lib/invariant');\nvar validateDOMNesting = require('./validateDOMNesting');\n\n/**\n * Text nodes violate a couple assumptions that React makes about components:\n *\n *  - When mounting text into the DOM, adjacent text nodes are merged.\n *  - Text nodes cannot be assigned a React root ID.\n *\n * This component is used to wrap strings between comment nodes so that they\n * can undergo the same reconciliation that is applied to elements.\n *\n * TODO: Investigate representing React components in the DOM with text nodes.\n *\n * @class ReactDOMTextComponent\n * @extends ReactComponent\n * @internal\n */\nvar ReactDOMTextComponent = function (text) {\n  // TODO: This is really a ReactText (ReactNode), not a ReactElement\n  this._currentElement = text;\n  this._stringText = '' + text;\n  // ReactDOMComponentTree uses these:\n  this._hostNode = null;\n  this._hostParent = null;\n\n  // Properties\n  this._domID = 0;\n  this._mountIndex = 0;\n  this._closingComment = null;\n  this._commentNodes = null;\n};\n_assign(ReactDOMTextComponent.prototype, {\n  /**\n   * Creates the markup for this text node. This node is not intended to have\n   * any features besides containing text content.\n   *\n   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction\n   * @return {string} Markup for this text node.\n   * @internal\n   */\n  mountComponent: function (transaction, hostParent, hostContainerInfo, context) {\n    if (process.env.NODE_ENV !== 'production') {\n      var parentInfo;\n      if (hostParent != null) {\n        parentInfo = hostParent._ancestorInfo;\n      } else if (hostContainerInfo != null) {\n        parentInfo = hostContainerInfo._ancestorInfo;\n      }\n      if (parentInfo) {\n        // parentInfo should always be present except for the top-level\n        // component when server rendering\n        validateDOMNesting(null, this._stringText, this, parentInfo);\n      }\n    }\n    var domID = hostContainerInfo._idCounter++;\n    var openingValue = ' react-text: ' + domID + ' ';\n    var closingValue = ' /react-text ';\n    this._domID = domID;\n    this._hostParent = hostParent;\n    if (transaction.useCreateElement) {\n      var ownerDocument = hostContainerInfo._ownerDocument;\n      var openingComment = ownerDocument.createComment(openingValue);\n      var closingComment = ownerDocument.createComment(closingValue);\n      var lazyTree = DOMLazyTree(ownerDocument.createDocumentFragment());\n      DOMLazyTree.queueChild(lazyTree, DOMLazyTree(openingComment));\n      if (this._stringText) {\n        DOMLazyTree.queueChild(lazyTree, DOMLazyTree(ownerDocument.createTextNode(this._stringText)));\n      }\n      DOMLazyTree.queueChild(lazyTree, DOMLazyTree(closingComment));\n      ReactDOMComponentTree.precacheNode(this, openingComment);\n      this._closingComment = closingComment;\n      return lazyTree;\n    } else {\n      var escapedText = escapeTextContentForBrowser(this._stringText);\n      if (transaction.renderToStaticMarkup) {\n        // Normally we'd wrap this between comment nodes for the reasons stated\n        // above, but since this is a situation where React won't take over\n        // (static pages), we can simply return the text as it is.\n        return escapedText;\n      }\n      return '<!--' + openingValue + '-->' + escapedText + '<!--' + closingValue + '-->';\n    }\n  },\n  /**\n   * Updates this component by updating the text content.\n   *\n   * @param {ReactText} nextText The next text content\n   * @param {ReactReconcileTransaction} transaction\n   * @internal\n   */\n  receiveComponent: function (nextText, transaction) {\n    if (nextText !== this._currentElement) {\n      this._currentElement = nextText;\n      var nextStringText = '' + nextText;\n      if (nextStringText !== this._stringText) {\n        // TODO: Save this as pending props and use performUpdateIfNecessary\n        // and/or updateComponent to do the actual update for consistency with\n        // other component types?\n        this._stringText = nextStringText;\n        var commentNodes = this.getHostNode();\n        DOMChildrenOperations.replaceDelimitedText(commentNodes[0], commentNodes[1], nextStringText);\n      }\n    }\n  },\n  getHostNode: function () {\n    var hostNode = this._commentNodes;\n    if (hostNode) {\n      return hostNode;\n    }\n    if (!this._closingComment) {\n      var openingComment = ReactDOMComponentTree.getNodeFromInstance(this);\n      var node = openingComment.nextSibling;\n      while (true) {\n        !(node != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Missing closing comment for text component %s', this._domID) : _prodInvariant('67', this._domID) : void 0;\n        if (node.nodeType === 8 && node.nodeValue === ' /react-text ') {\n          this._closingComment = node;\n          break;\n        }\n        node = node.nextSibling;\n      }\n    }\n    hostNode = [this._hostNode, this._closingComment];\n    this._commentNodes = hostNode;\n    return hostNode;\n  },\n  unmountComponent: function () {\n    this._closingComment = null;\n    this._commentNodes = null;\n    ReactDOMComponentTree.uncacheNode(this);\n  }\n});\nmodule.exports = ReactDOMTextComponent;","map":{"version":3,"names":["_prodInvariant","require","_assign","DOMChildrenOperations","DOMLazyTree","ReactDOMComponentTree","escapeTextContentForBrowser","invariant","validateDOMNesting","ReactDOMTextComponent","text","_currentElement","_stringText","_hostNode","_hostParent","_domID","_mountIndex","_closingComment","_commentNodes","prototype","mountComponent","transaction","hostParent","hostContainerInfo","context","process","env","NODE_ENV","parentInfo","_ancestorInfo","domID","_idCounter","openingValue","closingValue","useCreateElement","ownerDocument","_ownerDocument","openingComment","createComment","closingComment","lazyTree","createDocumentFragment","queueChild","createTextNode","precacheNode","escapedText","renderToStaticMarkup","receiveComponent","nextText","nextStringText","commentNodes","getHostNode","replaceDelimitedText","hostNode","getNodeFromInstance","node","nextSibling","nodeType","nodeValue","unmountComponent","uncacheNode","module","exports"],"sources":["D:/Project_CS/react_side/myapp/node_modules/react-file-viewer/node_modules/react-dom/lib/ReactDOMTextComponent.js"],"sourcesContent":["/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n'use strict';\n\nvar _prodInvariant = require('./reactProdInvariant'),\n    _assign = require('object-assign');\n\nvar DOMChildrenOperations = require('./DOMChildrenOperations');\nvar DOMLazyTree = require('./DOMLazyTree');\nvar ReactDOMComponentTree = require('./ReactDOMComponentTree');\n\nvar escapeTextContentForBrowser = require('./escapeTextContentForBrowser');\nvar invariant = require('fbjs/lib/invariant');\nvar validateDOMNesting = require('./validateDOMNesting');\n\n/**\n * Text nodes violate a couple assumptions that React makes about components:\n *\n *  - When mounting text into the DOM, adjacent text nodes are merged.\n *  - Text nodes cannot be assigned a React root ID.\n *\n * This component is used to wrap strings between comment nodes so that they\n * can undergo the same reconciliation that is applied to elements.\n *\n * TODO: Investigate representing React components in the DOM with text nodes.\n *\n * @class ReactDOMTextComponent\n * @extends ReactComponent\n * @internal\n */\nvar ReactDOMTextComponent = function (text) {\n  // TODO: This is really a ReactText (ReactNode), not a ReactElement\n  this._currentElement = text;\n  this._stringText = '' + text;\n  // ReactDOMComponentTree uses these:\n  this._hostNode = null;\n  this._hostParent = null;\n\n  // Properties\n  this._domID = 0;\n  this._mountIndex = 0;\n  this._closingComment = null;\n  this._commentNodes = null;\n};\n\n_assign(ReactDOMTextComponent.prototype, {\n  /**\n   * Creates the markup for this text node. This node is not intended to have\n   * any features besides containing text content.\n   *\n   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction\n   * @return {string} Markup for this text node.\n   * @internal\n   */\n  mountComponent: function (transaction, hostParent, hostContainerInfo, context) {\n    if (process.env.NODE_ENV !== 'production') {\n      var parentInfo;\n      if (hostParent != null) {\n        parentInfo = hostParent._ancestorInfo;\n      } else if (hostContainerInfo != null) {\n        parentInfo = hostContainerInfo._ancestorInfo;\n      }\n      if (parentInfo) {\n        // parentInfo should always be present except for the top-level\n        // component when server rendering\n        validateDOMNesting(null, this._stringText, this, parentInfo);\n      }\n    }\n\n    var domID = hostContainerInfo._idCounter++;\n    var openingValue = ' react-text: ' + domID + ' ';\n    var closingValue = ' /react-text ';\n    this._domID = domID;\n    this._hostParent = hostParent;\n    if (transaction.useCreateElement) {\n      var ownerDocument = hostContainerInfo._ownerDocument;\n      var openingComment = ownerDocument.createComment(openingValue);\n      var closingComment = ownerDocument.createComment(closingValue);\n      var lazyTree = DOMLazyTree(ownerDocument.createDocumentFragment());\n      DOMLazyTree.queueChild(lazyTree, DOMLazyTree(openingComment));\n      if (this._stringText) {\n        DOMLazyTree.queueChild(lazyTree, DOMLazyTree(ownerDocument.createTextNode(this._stringText)));\n      }\n      DOMLazyTree.queueChild(lazyTree, DOMLazyTree(closingComment));\n      ReactDOMComponentTree.precacheNode(this, openingComment);\n      this._closingComment = closingComment;\n      return lazyTree;\n    } else {\n      var escapedText = escapeTextContentForBrowser(this._stringText);\n\n      if (transaction.renderToStaticMarkup) {\n        // Normally we'd wrap this between comment nodes for the reasons stated\n        // above, but since this is a situation where React won't take over\n        // (static pages), we can simply return the text as it is.\n        return escapedText;\n      }\n\n      return '<!--' + openingValue + '-->' + escapedText + '<!--' + closingValue + '-->';\n    }\n  },\n\n  /**\n   * Updates this component by updating the text content.\n   *\n   * @param {ReactText} nextText The next text content\n   * @param {ReactReconcileTransaction} transaction\n   * @internal\n   */\n  receiveComponent: function (nextText, transaction) {\n    if (nextText !== this._currentElement) {\n      this._currentElement = nextText;\n      var nextStringText = '' + nextText;\n      if (nextStringText !== this._stringText) {\n        // TODO: Save this as pending props and use performUpdateIfNecessary\n        // and/or updateComponent to do the actual update for consistency with\n        // other component types?\n        this._stringText = nextStringText;\n        var commentNodes = this.getHostNode();\n        DOMChildrenOperations.replaceDelimitedText(commentNodes[0], commentNodes[1], nextStringText);\n      }\n    }\n  },\n\n  getHostNode: function () {\n    var hostNode = this._commentNodes;\n    if (hostNode) {\n      return hostNode;\n    }\n    if (!this._closingComment) {\n      var openingComment = ReactDOMComponentTree.getNodeFromInstance(this);\n      var node = openingComment.nextSibling;\n      while (true) {\n        !(node != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Missing closing comment for text component %s', this._domID) : _prodInvariant('67', this._domID) : void 0;\n        if (node.nodeType === 8 && node.nodeValue === ' /react-text ') {\n          this._closingComment = node;\n          break;\n        }\n        node = node.nextSibling;\n      }\n    }\n    hostNode = [this._hostNode, this._closingComment];\n    this._commentNodes = hostNode;\n    return hostNode;\n  },\n\n  unmountComponent: function () {\n    this._closingComment = null;\n    this._commentNodes = null;\n    ReactDOMComponentTree.uncacheNode(this);\n  }\n});\n\nmodule.exports = ReactDOMTextComponent;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}