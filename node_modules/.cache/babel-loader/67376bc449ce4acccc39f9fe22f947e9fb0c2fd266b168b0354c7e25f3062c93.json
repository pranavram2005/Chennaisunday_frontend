{"ast":null,"code":"/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\n'use strict';\n\nvar _prodInvariant = require('./reactProdInvariant');\nvar invariant = require('fbjs/lib/invariant');\n\n/**\n * Injectable ordering of event plugins.\n */\nvar eventPluginOrder = null;\n\n/**\n * Injectable mapping from names to event plugin modules.\n */\nvar namesToPlugins = {};\n\n/**\n * Recomputes the plugin list using the injected plugins and plugin ordering.\n *\n * @private\n */\nfunction recomputePluginOrdering() {\n  if (!eventPluginOrder) {\n    // Wait until an `eventPluginOrder` is injected.\n    return;\n  }\n  for (var pluginName in namesToPlugins) {\n    var pluginModule = namesToPlugins[pluginName];\n    var pluginIndex = eventPluginOrder.indexOf(pluginName);\n    !(pluginIndex > -1) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject event plugins that do not exist in the plugin ordering, `%s`.', pluginName) : _prodInvariant('96', pluginName) : void 0;\n    if (EventPluginRegistry.plugins[pluginIndex]) {\n      continue;\n    }\n    !pluginModule.extractEvents ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Event plugins must implement an `extractEvents` method, but `%s` does not.', pluginName) : _prodInvariant('97', pluginName) : void 0;\n    EventPluginRegistry.plugins[pluginIndex] = pluginModule;\n    var publishedEvents = pluginModule.eventTypes;\n    for (var eventName in publishedEvents) {\n      !publishEventForPlugin(publishedEvents[eventName], pluginModule, eventName) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Failed to publish event `%s` for plugin `%s`.', eventName, pluginName) : _prodInvariant('98', eventName, pluginName) : void 0;\n    }\n  }\n}\n\n/**\n * Publishes an event so that it can be dispatched by the supplied plugin.\n *\n * @param {object} dispatchConfig Dispatch configuration for the event.\n * @param {object} PluginModule Plugin publishing the event.\n * @return {boolean} True if the event was successfully published.\n * @private\n */\nfunction publishEventForPlugin(dispatchConfig, pluginModule, eventName) {\n  !!EventPluginRegistry.eventNameDispatchConfigs.hasOwnProperty(eventName) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginHub: More than one plugin attempted to publish the same event name, `%s`.', eventName) : _prodInvariant('99', eventName) : void 0;\n  EventPluginRegistry.eventNameDispatchConfigs[eventName] = dispatchConfig;\n  var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;\n  if (phasedRegistrationNames) {\n    for (var phaseName in phasedRegistrationNames) {\n      if (phasedRegistrationNames.hasOwnProperty(phaseName)) {\n        var phasedRegistrationName = phasedRegistrationNames[phaseName];\n        publishRegistrationName(phasedRegistrationName, pluginModule, eventName);\n      }\n    }\n    return true;\n  } else if (dispatchConfig.registrationName) {\n    publishRegistrationName(dispatchConfig.registrationName, pluginModule, eventName);\n    return true;\n  }\n  return false;\n}\n\n/**\n * Publishes a registration name that is used to identify dispatched events and\n * can be used with `EventPluginHub.putListener` to register listeners.\n *\n * @param {string} registrationName Registration name to add.\n * @param {object} PluginModule Plugin publishing the event.\n * @private\n */\nfunction publishRegistrationName(registrationName, pluginModule, eventName) {\n  !!EventPluginRegistry.registrationNameModules[registrationName] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginHub: More than one plugin attempted to publish the same registration name, `%s`.', registrationName) : _prodInvariant('100', registrationName) : void 0;\n  EventPluginRegistry.registrationNameModules[registrationName] = pluginModule;\n  EventPluginRegistry.registrationNameDependencies[registrationName] = pluginModule.eventTypes[eventName].dependencies;\n  if (process.env.NODE_ENV !== 'production') {\n    var lowerCasedName = registrationName.toLowerCase();\n    EventPluginRegistry.possibleRegistrationNames[lowerCasedName] = registrationName;\n    if (registrationName === 'onDoubleClick') {\n      EventPluginRegistry.possibleRegistrationNames.ondblclick = registrationName;\n    }\n  }\n}\n\n/**\n * Registers plugins so that they can extract and dispatch events.\n *\n * @see {EventPluginHub}\n */\nvar EventPluginRegistry = {\n  /**\n   * Ordered list of injected plugins.\n   */\n  plugins: [],\n  /**\n   * Mapping from event name to dispatch config\n   */\n  eventNameDispatchConfigs: {},\n  /**\n   * Mapping from registration name to plugin module\n   */\n  registrationNameModules: {},\n  /**\n   * Mapping from registration name to event name\n   */\n  registrationNameDependencies: {},\n  /**\n   * Mapping from lowercase registration names to the properly cased version,\n   * used to warn in the case of missing event handlers. Available\n   * only in __DEV__.\n   * @type {Object}\n   */\n  possibleRegistrationNames: process.env.NODE_ENV !== 'production' ? {} : null,\n  // Trust the developer to only use possibleRegistrationNames in __DEV__\n\n  /**\n   * Injects an ordering of plugins (by plugin name). This allows the ordering\n   * to be decoupled from injection of the actual plugins so that ordering is\n   * always deterministic regardless of packaging, on-the-fly injection, etc.\n   *\n   * @param {array} InjectedEventPluginOrder\n   * @internal\n   * @see {EventPluginHub.injection.injectEventPluginOrder}\n   */\n  injectEventPluginOrder: function (injectedEventPluginOrder) {\n    !!eventPluginOrder ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject event plugin ordering more than once. You are likely trying to load more than one copy of React.') : _prodInvariant('101') : void 0;\n    // Clone the ordering so it cannot be dynamically mutated.\n    eventPluginOrder = Array.prototype.slice.call(injectedEventPluginOrder);\n    recomputePluginOrdering();\n  },\n  /**\n   * Injects plugins to be used by `EventPluginHub`. The plugin names must be\n   * in the ordering injected by `injectEventPluginOrder`.\n   *\n   * Plugins can be injected as part of page initialization or on-the-fly.\n   *\n   * @param {object} injectedNamesToPlugins Map from names to plugin modules.\n   * @internal\n   * @see {EventPluginHub.injection.injectEventPluginsByName}\n   */\n  injectEventPluginsByName: function (injectedNamesToPlugins) {\n    var isOrderingDirty = false;\n    for (var pluginName in injectedNamesToPlugins) {\n      if (!injectedNamesToPlugins.hasOwnProperty(pluginName)) {\n        continue;\n      }\n      var pluginModule = injectedNamesToPlugins[pluginName];\n      if (!namesToPlugins.hasOwnProperty(pluginName) || namesToPlugins[pluginName] !== pluginModule) {\n        !!namesToPlugins[pluginName] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject two different event plugins using the same name, `%s`.', pluginName) : _prodInvariant('102', pluginName) : void 0;\n        namesToPlugins[pluginName] = pluginModule;\n        isOrderingDirty = true;\n      }\n    }\n    if (isOrderingDirty) {\n      recomputePluginOrdering();\n    }\n  },\n  /**\n   * Looks up the plugin for the supplied event.\n   *\n   * @param {object} event A synthetic event.\n   * @return {?object} The plugin that created the supplied event.\n   * @internal\n   */\n  getPluginModuleForEvent: function (event) {\n    var dispatchConfig = event.dispatchConfig;\n    if (dispatchConfig.registrationName) {\n      return EventPluginRegistry.registrationNameModules[dispatchConfig.registrationName] || null;\n    }\n    if (dispatchConfig.phasedRegistrationNames !== undefined) {\n      // pulling phasedRegistrationNames out of dispatchConfig helps Flow see\n      // that it is not undefined.\n      var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;\n      for (var phase in phasedRegistrationNames) {\n        if (!phasedRegistrationNames.hasOwnProperty(phase)) {\n          continue;\n        }\n        var pluginModule = EventPluginRegistry.registrationNameModules[phasedRegistrationNames[phase]];\n        if (pluginModule) {\n          return pluginModule;\n        }\n      }\n    }\n    return null;\n  },\n  /**\n   * Exposed for unit testing.\n   * @private\n   */\n  _resetEventPlugins: function () {\n    eventPluginOrder = null;\n    for (var pluginName in namesToPlugins) {\n      if (namesToPlugins.hasOwnProperty(pluginName)) {\n        delete namesToPlugins[pluginName];\n      }\n    }\n    EventPluginRegistry.plugins.length = 0;\n    var eventNameDispatchConfigs = EventPluginRegistry.eventNameDispatchConfigs;\n    for (var eventName in eventNameDispatchConfigs) {\n      if (eventNameDispatchConfigs.hasOwnProperty(eventName)) {\n        delete eventNameDispatchConfigs[eventName];\n      }\n    }\n    var registrationNameModules = EventPluginRegistry.registrationNameModules;\n    for (var registrationName in registrationNameModules) {\n      if (registrationNameModules.hasOwnProperty(registrationName)) {\n        delete registrationNameModules[registrationName];\n      }\n    }\n    if (process.env.NODE_ENV !== 'production') {\n      var possibleRegistrationNames = EventPluginRegistry.possibleRegistrationNames;\n      for (var lowerCasedName in possibleRegistrationNames) {\n        if (possibleRegistrationNames.hasOwnProperty(lowerCasedName)) {\n          delete possibleRegistrationNames[lowerCasedName];\n        }\n      }\n    }\n  }\n};\nmodule.exports = EventPluginRegistry;","map":{"version":3,"names":["_prodInvariant","require","invariant","eventPluginOrder","namesToPlugins","recomputePluginOrdering","pluginName","pluginModule","pluginIndex","indexOf","process","env","NODE_ENV","EventPluginRegistry","plugins","extractEvents","publishedEvents","eventTypes","eventName","publishEventForPlugin","dispatchConfig","eventNameDispatchConfigs","hasOwnProperty","phasedRegistrationNames","phaseName","phasedRegistrationName","publishRegistrationName","registrationName","registrationNameModules","registrationNameDependencies","dependencies","lowerCasedName","toLowerCase","possibleRegistrationNames","ondblclick","injectEventPluginOrder","injectedEventPluginOrder","Array","prototype","slice","call","injectEventPluginsByName","injectedNamesToPlugins","isOrderingDirty","getPluginModuleForEvent","event","undefined","phase","_resetEventPlugins","length","module","exports"],"sources":["D:/Project_CS/react_side/myapp/node_modules/react-file-viewer/node_modules/react-dom/lib/EventPluginRegistry.js"],"sourcesContent":["/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\n'use strict';\n\nvar _prodInvariant = require('./reactProdInvariant');\n\nvar invariant = require('fbjs/lib/invariant');\n\n/**\n * Injectable ordering of event plugins.\n */\nvar eventPluginOrder = null;\n\n/**\n * Injectable mapping from names to event plugin modules.\n */\nvar namesToPlugins = {};\n\n/**\n * Recomputes the plugin list using the injected plugins and plugin ordering.\n *\n * @private\n */\nfunction recomputePluginOrdering() {\n  if (!eventPluginOrder) {\n    // Wait until an `eventPluginOrder` is injected.\n    return;\n  }\n  for (var pluginName in namesToPlugins) {\n    var pluginModule = namesToPlugins[pluginName];\n    var pluginIndex = eventPluginOrder.indexOf(pluginName);\n    !(pluginIndex > -1) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject event plugins that do not exist in the plugin ordering, `%s`.', pluginName) : _prodInvariant('96', pluginName) : void 0;\n    if (EventPluginRegistry.plugins[pluginIndex]) {\n      continue;\n    }\n    !pluginModule.extractEvents ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Event plugins must implement an `extractEvents` method, but `%s` does not.', pluginName) : _prodInvariant('97', pluginName) : void 0;\n    EventPluginRegistry.plugins[pluginIndex] = pluginModule;\n    var publishedEvents = pluginModule.eventTypes;\n    for (var eventName in publishedEvents) {\n      !publishEventForPlugin(publishedEvents[eventName], pluginModule, eventName) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Failed to publish event `%s` for plugin `%s`.', eventName, pluginName) : _prodInvariant('98', eventName, pluginName) : void 0;\n    }\n  }\n}\n\n/**\n * Publishes an event so that it can be dispatched by the supplied plugin.\n *\n * @param {object} dispatchConfig Dispatch configuration for the event.\n * @param {object} PluginModule Plugin publishing the event.\n * @return {boolean} True if the event was successfully published.\n * @private\n */\nfunction publishEventForPlugin(dispatchConfig, pluginModule, eventName) {\n  !!EventPluginRegistry.eventNameDispatchConfigs.hasOwnProperty(eventName) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginHub: More than one plugin attempted to publish the same event name, `%s`.', eventName) : _prodInvariant('99', eventName) : void 0;\n  EventPluginRegistry.eventNameDispatchConfigs[eventName] = dispatchConfig;\n\n  var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;\n  if (phasedRegistrationNames) {\n    for (var phaseName in phasedRegistrationNames) {\n      if (phasedRegistrationNames.hasOwnProperty(phaseName)) {\n        var phasedRegistrationName = phasedRegistrationNames[phaseName];\n        publishRegistrationName(phasedRegistrationName, pluginModule, eventName);\n      }\n    }\n    return true;\n  } else if (dispatchConfig.registrationName) {\n    publishRegistrationName(dispatchConfig.registrationName, pluginModule, eventName);\n    return true;\n  }\n  return false;\n}\n\n/**\n * Publishes a registration name that is used to identify dispatched events and\n * can be used with `EventPluginHub.putListener` to register listeners.\n *\n * @param {string} registrationName Registration name to add.\n * @param {object} PluginModule Plugin publishing the event.\n * @private\n */\nfunction publishRegistrationName(registrationName, pluginModule, eventName) {\n  !!EventPluginRegistry.registrationNameModules[registrationName] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginHub: More than one plugin attempted to publish the same registration name, `%s`.', registrationName) : _prodInvariant('100', registrationName) : void 0;\n  EventPluginRegistry.registrationNameModules[registrationName] = pluginModule;\n  EventPluginRegistry.registrationNameDependencies[registrationName] = pluginModule.eventTypes[eventName].dependencies;\n\n  if (process.env.NODE_ENV !== 'production') {\n    var lowerCasedName = registrationName.toLowerCase();\n    EventPluginRegistry.possibleRegistrationNames[lowerCasedName] = registrationName;\n\n    if (registrationName === 'onDoubleClick') {\n      EventPluginRegistry.possibleRegistrationNames.ondblclick = registrationName;\n    }\n  }\n}\n\n/**\n * Registers plugins so that they can extract and dispatch events.\n *\n * @see {EventPluginHub}\n */\nvar EventPluginRegistry = {\n  /**\n   * Ordered list of injected plugins.\n   */\n  plugins: [],\n\n  /**\n   * Mapping from event name to dispatch config\n   */\n  eventNameDispatchConfigs: {},\n\n  /**\n   * Mapping from registration name to plugin module\n   */\n  registrationNameModules: {},\n\n  /**\n   * Mapping from registration name to event name\n   */\n  registrationNameDependencies: {},\n\n  /**\n   * Mapping from lowercase registration names to the properly cased version,\n   * used to warn in the case of missing event handlers. Available\n   * only in __DEV__.\n   * @type {Object}\n   */\n  possibleRegistrationNames: process.env.NODE_ENV !== 'production' ? {} : null,\n  // Trust the developer to only use possibleRegistrationNames in __DEV__\n\n  /**\n   * Injects an ordering of plugins (by plugin name). This allows the ordering\n   * to be decoupled from injection of the actual plugins so that ordering is\n   * always deterministic regardless of packaging, on-the-fly injection, etc.\n   *\n   * @param {array} InjectedEventPluginOrder\n   * @internal\n   * @see {EventPluginHub.injection.injectEventPluginOrder}\n   */\n  injectEventPluginOrder: function (injectedEventPluginOrder) {\n    !!eventPluginOrder ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject event plugin ordering more than once. You are likely trying to load more than one copy of React.') : _prodInvariant('101') : void 0;\n    // Clone the ordering so it cannot be dynamically mutated.\n    eventPluginOrder = Array.prototype.slice.call(injectedEventPluginOrder);\n    recomputePluginOrdering();\n  },\n\n  /**\n   * Injects plugins to be used by `EventPluginHub`. The plugin names must be\n   * in the ordering injected by `injectEventPluginOrder`.\n   *\n   * Plugins can be injected as part of page initialization or on-the-fly.\n   *\n   * @param {object} injectedNamesToPlugins Map from names to plugin modules.\n   * @internal\n   * @see {EventPluginHub.injection.injectEventPluginsByName}\n   */\n  injectEventPluginsByName: function (injectedNamesToPlugins) {\n    var isOrderingDirty = false;\n    for (var pluginName in injectedNamesToPlugins) {\n      if (!injectedNamesToPlugins.hasOwnProperty(pluginName)) {\n        continue;\n      }\n      var pluginModule = injectedNamesToPlugins[pluginName];\n      if (!namesToPlugins.hasOwnProperty(pluginName) || namesToPlugins[pluginName] !== pluginModule) {\n        !!namesToPlugins[pluginName] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject two different event plugins using the same name, `%s`.', pluginName) : _prodInvariant('102', pluginName) : void 0;\n        namesToPlugins[pluginName] = pluginModule;\n        isOrderingDirty = true;\n      }\n    }\n    if (isOrderingDirty) {\n      recomputePluginOrdering();\n    }\n  },\n\n  /**\n   * Looks up the plugin for the supplied event.\n   *\n   * @param {object} event A synthetic event.\n   * @return {?object} The plugin that created the supplied event.\n   * @internal\n   */\n  getPluginModuleForEvent: function (event) {\n    var dispatchConfig = event.dispatchConfig;\n    if (dispatchConfig.registrationName) {\n      return EventPluginRegistry.registrationNameModules[dispatchConfig.registrationName] || null;\n    }\n    if (dispatchConfig.phasedRegistrationNames !== undefined) {\n      // pulling phasedRegistrationNames out of dispatchConfig helps Flow see\n      // that it is not undefined.\n      var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;\n\n      for (var phase in phasedRegistrationNames) {\n        if (!phasedRegistrationNames.hasOwnProperty(phase)) {\n          continue;\n        }\n        var pluginModule = EventPluginRegistry.registrationNameModules[phasedRegistrationNames[phase]];\n        if (pluginModule) {\n          return pluginModule;\n        }\n      }\n    }\n    return null;\n  },\n\n  /**\n   * Exposed for unit testing.\n   * @private\n   */\n  _resetEventPlugins: function () {\n    eventPluginOrder = null;\n    for (var pluginName in namesToPlugins) {\n      if (namesToPlugins.hasOwnProperty(pluginName)) {\n        delete namesToPlugins[pluginName];\n      }\n    }\n    EventPluginRegistry.plugins.length = 0;\n\n    var eventNameDispatchConfigs = EventPluginRegistry.eventNameDispatchConfigs;\n    for (var eventName in eventNameDispatchConfigs) {\n      if (eventNameDispatchConfigs.hasOwnProperty(eventName)) {\n        delete eventNameDispatchConfigs[eventName];\n      }\n    }\n\n    var registrationNameModules = EventPluginRegistry.registrationNameModules;\n    for (var registrationName in registrationNameModules) {\n      if (registrationNameModules.hasOwnProperty(registrationName)) {\n        delete registrationNameModules[registrationName];\n      }\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      var possibleRegistrationNames = EventPluginRegistry.possibleRegistrationNames;\n      for (var lowerCasedName in possibleRegistrationNames) {\n        if (possibleRegistrationNames.hasOwnProperty(lowerCasedName)) {\n          delete possibleRegistrationNames[lowerCasedName];\n        }\n      }\n    }\n  }\n};\n\nmodule.exports = EventPluginRegistry;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}