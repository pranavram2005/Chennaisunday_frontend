{"ast":null,"code":"/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n'use strict';\n\nvar _prodInvariant = require('./reactProdInvariant');\nvar DOMProperty = require('./DOMProperty');\nvar ReactDOMComponentFlags = require('./ReactDOMComponentFlags');\nvar invariant = require('fbjs/lib/invariant');\nvar ATTR_NAME = DOMProperty.ID_ATTRIBUTE_NAME;\nvar Flags = ReactDOMComponentFlags;\nvar internalInstanceKey = '__reactInternalInstance$' + Math.random().toString(36).slice(2);\n\n/**\n * Check if a given node should be cached.\n */\nfunction shouldPrecacheNode(node, nodeID) {\n  return node.nodeType === 1 && node.getAttribute(ATTR_NAME) === String(nodeID) || node.nodeType === 8 && node.nodeValue === ' react-text: ' + nodeID + ' ' || node.nodeType === 8 && node.nodeValue === ' react-empty: ' + nodeID + ' ';\n}\n\n/**\n * Drill down (through composites and empty components) until we get a host or\n * host text component.\n *\n * This is pretty polymorphic but unavoidable with the current structure we have\n * for `_renderedChildren`.\n */\nfunction getRenderedHostOrTextFromComponent(component) {\n  var rendered;\n  while (rendered = component._renderedComponent) {\n    component = rendered;\n  }\n  return component;\n}\n\n/**\n * Populate `_hostNode` on the rendered host/text component with the given\n * DOM node. The passed `inst` can be a composite.\n */\nfunction precacheNode(inst, node) {\n  var hostInst = getRenderedHostOrTextFromComponent(inst);\n  hostInst._hostNode = node;\n  node[internalInstanceKey] = hostInst;\n}\nfunction uncacheNode(inst) {\n  var node = inst._hostNode;\n  if (node) {\n    delete node[internalInstanceKey];\n    inst._hostNode = null;\n  }\n}\n\n/**\n * Populate `_hostNode` on each child of `inst`, assuming that the children\n * match up with the DOM (element) children of `node`.\n *\n * We cache entire levels at once to avoid an n^2 problem where we access the\n * children of a node sequentially and have to walk from the start to our target\n * node every time.\n *\n * Since we update `_renderedChildren` and the actual DOM at (slightly)\n * different times, we could race here and see a newer `_renderedChildren` than\n * the DOM nodes we see. To avoid this, ReactMultiChild calls\n * `prepareToManageChildren` before we change `_renderedChildren`, at which\n * time the container's child nodes are always cached (until it unmounts).\n */\nfunction precacheChildNodes(inst, node) {\n  if (inst._flags & Flags.hasCachedChildNodes) {\n    return;\n  }\n  var children = inst._renderedChildren;\n  var childNode = node.firstChild;\n  outer: for (var name in children) {\n    if (!children.hasOwnProperty(name)) {\n      continue;\n    }\n    var childInst = children[name];\n    var childID = getRenderedHostOrTextFromComponent(childInst)._domID;\n    if (childID === 0) {\n      // We're currently unmounting this child in ReactMultiChild; skip it.\n      continue;\n    }\n    // We assume the child nodes are in the same order as the child instances.\n    for (; childNode !== null; childNode = childNode.nextSibling) {\n      if (shouldPrecacheNode(childNode, childID)) {\n        precacheNode(childInst, childNode);\n        continue outer;\n      }\n    }\n    // We reached the end of the DOM children without finding an ID match.\n    !false ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Unable to find element with ID %s.', childID) : _prodInvariant('32', childID) : void 0;\n  }\n  inst._flags |= Flags.hasCachedChildNodes;\n}\n\n/**\n * Given a DOM node, return the closest ReactDOMComponent or\n * ReactDOMTextComponent instance ancestor.\n */\nfunction getClosestInstanceFromNode(node) {\n  if (node[internalInstanceKey]) {\n    return node[internalInstanceKey];\n  }\n\n  // Walk up the tree until we find an ancestor whose instance we have cached.\n  var parents = [];\n  while (!node[internalInstanceKey]) {\n    parents.push(node);\n    if (node.parentNode) {\n      node = node.parentNode;\n    } else {\n      // Top of the tree. This node must not be part of a React tree (or is\n      // unmounted, potentially).\n      return null;\n    }\n  }\n  var closest;\n  var inst;\n  for (; node && (inst = node[internalInstanceKey]); node = parents.pop()) {\n    closest = inst;\n    if (parents.length) {\n      precacheChildNodes(inst, node);\n    }\n  }\n  return closest;\n}\n\n/**\n * Given a DOM node, return the ReactDOMComponent or ReactDOMTextComponent\n * instance, or null if the node was not rendered by this React.\n */\nfunction getInstanceFromNode(node) {\n  var inst = getClosestInstanceFromNode(node);\n  if (inst != null && inst._hostNode === node) {\n    return inst;\n  } else {\n    return null;\n  }\n}\n\n/**\n * Given a ReactDOMComponent or ReactDOMTextComponent, return the corresponding\n * DOM node.\n */\nfunction getNodeFromInstance(inst) {\n  // Without this first invariant, passing a non-DOM-component triggers the next\n  // invariant for a missing parent, which is super confusing.\n  !(inst._hostNode !== undefined) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getNodeFromInstance: Invalid argument.') : _prodInvariant('33') : void 0;\n  if (inst._hostNode) {\n    return inst._hostNode;\n  }\n\n  // Walk up the tree until we find an ancestor whose DOM node we have cached.\n  var parents = [];\n  while (!inst._hostNode) {\n    parents.push(inst);\n    !inst._hostParent ? process.env.NODE_ENV !== 'production' ? invariant(false, 'React DOM tree root should always have a node reference.') : _prodInvariant('34') : void 0;\n    inst = inst._hostParent;\n  }\n\n  // Now parents contains each ancestor that does *not* have a cached native\n  // node, and `inst` is the deepest ancestor that does.\n  for (; parents.length; inst = parents.pop()) {\n    precacheChildNodes(inst, inst._hostNode);\n  }\n  return inst._hostNode;\n}\nvar ReactDOMComponentTree = {\n  getClosestInstanceFromNode: getClosestInstanceFromNode,\n  getInstanceFromNode: getInstanceFromNode,\n  getNodeFromInstance: getNodeFromInstance,\n  precacheChildNodes: precacheChildNodes,\n  precacheNode: precacheNode,\n  uncacheNode: uncacheNode\n};\nmodule.exports = ReactDOMComponentTree;","map":{"version":3,"names":["_prodInvariant","require","DOMProperty","ReactDOMComponentFlags","invariant","ATTR_NAME","ID_ATTRIBUTE_NAME","Flags","internalInstanceKey","Math","random","toString","slice","shouldPrecacheNode","node","nodeID","nodeType","getAttribute","String","nodeValue","getRenderedHostOrTextFromComponent","component","rendered","_renderedComponent","precacheNode","inst","hostInst","_hostNode","uncacheNode","precacheChildNodes","_flags","hasCachedChildNodes","children","_renderedChildren","childNode","firstChild","outer","name","hasOwnProperty","childInst","childID","_domID","nextSibling","process","env","NODE_ENV","getClosestInstanceFromNode","parents","push","parentNode","closest","pop","length","getInstanceFromNode","getNodeFromInstance","undefined","_hostParent","ReactDOMComponentTree","module","exports"],"sources":["D:/Project_CS/react_side/myapp/node_modules/react-file-viewer/node_modules/react-dom/lib/ReactDOMComponentTree.js"],"sourcesContent":["/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n'use strict';\n\nvar _prodInvariant = require('./reactProdInvariant');\n\nvar DOMProperty = require('./DOMProperty');\nvar ReactDOMComponentFlags = require('./ReactDOMComponentFlags');\n\nvar invariant = require('fbjs/lib/invariant');\n\nvar ATTR_NAME = DOMProperty.ID_ATTRIBUTE_NAME;\nvar Flags = ReactDOMComponentFlags;\n\nvar internalInstanceKey = '__reactInternalInstance$' + Math.random().toString(36).slice(2);\n\n/**\n * Check if a given node should be cached.\n */\nfunction shouldPrecacheNode(node, nodeID) {\n  return node.nodeType === 1 && node.getAttribute(ATTR_NAME) === String(nodeID) || node.nodeType === 8 && node.nodeValue === ' react-text: ' + nodeID + ' ' || node.nodeType === 8 && node.nodeValue === ' react-empty: ' + nodeID + ' ';\n}\n\n/**\n * Drill down (through composites and empty components) until we get a host or\n * host text component.\n *\n * This is pretty polymorphic but unavoidable with the current structure we have\n * for `_renderedChildren`.\n */\nfunction getRenderedHostOrTextFromComponent(component) {\n  var rendered;\n  while (rendered = component._renderedComponent) {\n    component = rendered;\n  }\n  return component;\n}\n\n/**\n * Populate `_hostNode` on the rendered host/text component with the given\n * DOM node. The passed `inst` can be a composite.\n */\nfunction precacheNode(inst, node) {\n  var hostInst = getRenderedHostOrTextFromComponent(inst);\n  hostInst._hostNode = node;\n  node[internalInstanceKey] = hostInst;\n}\n\nfunction uncacheNode(inst) {\n  var node = inst._hostNode;\n  if (node) {\n    delete node[internalInstanceKey];\n    inst._hostNode = null;\n  }\n}\n\n/**\n * Populate `_hostNode` on each child of `inst`, assuming that the children\n * match up with the DOM (element) children of `node`.\n *\n * We cache entire levels at once to avoid an n^2 problem where we access the\n * children of a node sequentially and have to walk from the start to our target\n * node every time.\n *\n * Since we update `_renderedChildren` and the actual DOM at (slightly)\n * different times, we could race here and see a newer `_renderedChildren` than\n * the DOM nodes we see. To avoid this, ReactMultiChild calls\n * `prepareToManageChildren` before we change `_renderedChildren`, at which\n * time the container's child nodes are always cached (until it unmounts).\n */\nfunction precacheChildNodes(inst, node) {\n  if (inst._flags & Flags.hasCachedChildNodes) {\n    return;\n  }\n  var children = inst._renderedChildren;\n  var childNode = node.firstChild;\n  outer: for (var name in children) {\n    if (!children.hasOwnProperty(name)) {\n      continue;\n    }\n    var childInst = children[name];\n    var childID = getRenderedHostOrTextFromComponent(childInst)._domID;\n    if (childID === 0) {\n      // We're currently unmounting this child in ReactMultiChild; skip it.\n      continue;\n    }\n    // We assume the child nodes are in the same order as the child instances.\n    for (; childNode !== null; childNode = childNode.nextSibling) {\n      if (shouldPrecacheNode(childNode, childID)) {\n        precacheNode(childInst, childNode);\n        continue outer;\n      }\n    }\n    // We reached the end of the DOM children without finding an ID match.\n    !false ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Unable to find element with ID %s.', childID) : _prodInvariant('32', childID) : void 0;\n  }\n  inst._flags |= Flags.hasCachedChildNodes;\n}\n\n/**\n * Given a DOM node, return the closest ReactDOMComponent or\n * ReactDOMTextComponent instance ancestor.\n */\nfunction getClosestInstanceFromNode(node) {\n  if (node[internalInstanceKey]) {\n    return node[internalInstanceKey];\n  }\n\n  // Walk up the tree until we find an ancestor whose instance we have cached.\n  var parents = [];\n  while (!node[internalInstanceKey]) {\n    parents.push(node);\n    if (node.parentNode) {\n      node = node.parentNode;\n    } else {\n      // Top of the tree. This node must not be part of a React tree (or is\n      // unmounted, potentially).\n      return null;\n    }\n  }\n\n  var closest;\n  var inst;\n  for (; node && (inst = node[internalInstanceKey]); node = parents.pop()) {\n    closest = inst;\n    if (parents.length) {\n      precacheChildNodes(inst, node);\n    }\n  }\n\n  return closest;\n}\n\n/**\n * Given a DOM node, return the ReactDOMComponent or ReactDOMTextComponent\n * instance, or null if the node was not rendered by this React.\n */\nfunction getInstanceFromNode(node) {\n  var inst = getClosestInstanceFromNode(node);\n  if (inst != null && inst._hostNode === node) {\n    return inst;\n  } else {\n    return null;\n  }\n}\n\n/**\n * Given a ReactDOMComponent or ReactDOMTextComponent, return the corresponding\n * DOM node.\n */\nfunction getNodeFromInstance(inst) {\n  // Without this first invariant, passing a non-DOM-component triggers the next\n  // invariant for a missing parent, which is super confusing.\n  !(inst._hostNode !== undefined) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getNodeFromInstance: Invalid argument.') : _prodInvariant('33') : void 0;\n\n  if (inst._hostNode) {\n    return inst._hostNode;\n  }\n\n  // Walk up the tree until we find an ancestor whose DOM node we have cached.\n  var parents = [];\n  while (!inst._hostNode) {\n    parents.push(inst);\n    !inst._hostParent ? process.env.NODE_ENV !== 'production' ? invariant(false, 'React DOM tree root should always have a node reference.') : _prodInvariant('34') : void 0;\n    inst = inst._hostParent;\n  }\n\n  // Now parents contains each ancestor that does *not* have a cached native\n  // node, and `inst` is the deepest ancestor that does.\n  for (; parents.length; inst = parents.pop()) {\n    precacheChildNodes(inst, inst._hostNode);\n  }\n\n  return inst._hostNode;\n}\n\nvar ReactDOMComponentTree = {\n  getClosestInstanceFromNode: getClosestInstanceFromNode,\n  getInstanceFromNode: getInstanceFromNode,\n  getNodeFromInstance: getNodeFromInstance,\n  precacheChildNodes: precacheChildNodes,\n  precacheNode: precacheNode,\n  uncacheNode: uncacheNode\n};\n\nmodule.exports = ReactDOMComponentTree;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}