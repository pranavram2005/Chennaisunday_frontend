{"ast":null,"code":"/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n'use strict';\n\nvar DOMNamespaces = require('./DOMNamespaces');\nvar setInnerHTML = require('./setInnerHTML');\nvar createMicrosoftUnsafeLocalFunction = require('./createMicrosoftUnsafeLocalFunction');\nvar setTextContent = require('./setTextContent');\nvar ELEMENT_NODE_TYPE = 1;\nvar DOCUMENT_FRAGMENT_NODE_TYPE = 11;\n\n/**\n * In IE (8-11) and Edge, appending nodes with no children is dramatically\n * faster than appending a full subtree, so we essentially queue up the\n * .appendChild calls here and apply them so each node is added to its parent\n * before any children are added.\n *\n * In other browsers, doing so is slower or neutral compared to the other order\n * (in Firefox, twice as slow) so we only do this inversion in IE.\n *\n * See https://github.com/spicyj/innerhtml-vs-createelement-vs-clonenode.\n */\nvar enableLazy = typeof document !== 'undefined' && typeof document.documentMode === 'number' || typeof navigator !== 'undefined' && typeof navigator.userAgent === 'string' && /\\bEdge\\/\\d/.test(navigator.userAgent);\nfunction insertTreeChildren(tree) {\n  if (!enableLazy) {\n    return;\n  }\n  var node = tree.node;\n  var children = tree.children;\n  if (children.length) {\n    for (var i = 0; i < children.length; i++) {\n      insertTreeBefore(node, children[i], null);\n    }\n  } else if (tree.html != null) {\n    setInnerHTML(node, tree.html);\n  } else if (tree.text != null) {\n    setTextContent(node, tree.text);\n  }\n}\nvar insertTreeBefore = createMicrosoftUnsafeLocalFunction(function (parentNode, tree, referenceNode) {\n  // DocumentFragments aren't actually part of the DOM after insertion so\n  // appending children won't update the DOM. We need to ensure the fragment\n  // is properly populated first, breaking out of our lazy approach for just\n  // this level. Also, some <object> plugins (like Flash Player) will read\n  // <param> nodes immediately upon insertion into the DOM, so <object>\n  // must also be populated prior to insertion into the DOM.\n  if (tree.node.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE || tree.node.nodeType === ELEMENT_NODE_TYPE && tree.node.nodeName.toLowerCase() === 'object' && (tree.node.namespaceURI == null || tree.node.namespaceURI === DOMNamespaces.html)) {\n    insertTreeChildren(tree);\n    parentNode.insertBefore(tree.node, referenceNode);\n  } else {\n    parentNode.insertBefore(tree.node, referenceNode);\n    insertTreeChildren(tree);\n  }\n});\nfunction replaceChildWithTree(oldNode, newTree) {\n  oldNode.parentNode.replaceChild(newTree.node, oldNode);\n  insertTreeChildren(newTree);\n}\nfunction queueChild(parentTree, childTree) {\n  if (enableLazy) {\n    parentTree.children.push(childTree);\n  } else {\n    parentTree.node.appendChild(childTree.node);\n  }\n}\nfunction queueHTML(tree, html) {\n  if (enableLazy) {\n    tree.html = html;\n  } else {\n    setInnerHTML(tree.node, html);\n  }\n}\nfunction queueText(tree, text) {\n  if (enableLazy) {\n    tree.text = text;\n  } else {\n    setTextContent(tree.node, text);\n  }\n}\nfunction toString() {\n  return this.node.nodeName;\n}\nfunction DOMLazyTree(node) {\n  return {\n    node: node,\n    children: [],\n    html: null,\n    text: null,\n    toString: toString\n  };\n}\nDOMLazyTree.insertTreeBefore = insertTreeBefore;\nDOMLazyTree.replaceChildWithTree = replaceChildWithTree;\nDOMLazyTree.queueChild = queueChild;\nDOMLazyTree.queueHTML = queueHTML;\nDOMLazyTree.queueText = queueText;\nmodule.exports = DOMLazyTree;","map":{"version":3,"names":["DOMNamespaces","require","setInnerHTML","createMicrosoftUnsafeLocalFunction","setTextContent","ELEMENT_NODE_TYPE","DOCUMENT_FRAGMENT_NODE_TYPE","enableLazy","document","documentMode","navigator","userAgent","test","insertTreeChildren","tree","node","children","length","i","insertTreeBefore","html","text","parentNode","referenceNode","nodeType","nodeName","toLowerCase","namespaceURI","insertBefore","replaceChildWithTree","oldNode","newTree","replaceChild","queueChild","parentTree","childTree","push","appendChild","queueHTML","queueText","toString","DOMLazyTree","module","exports"],"sources":["D:/Project_CS/react_side/myapp/node_modules/react-file-viewer/node_modules/react-dom/lib/DOMLazyTree.js"],"sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n'use strict';\n\nvar DOMNamespaces = require('./DOMNamespaces');\nvar setInnerHTML = require('./setInnerHTML');\n\nvar createMicrosoftUnsafeLocalFunction = require('./createMicrosoftUnsafeLocalFunction');\nvar setTextContent = require('./setTextContent');\n\nvar ELEMENT_NODE_TYPE = 1;\nvar DOCUMENT_FRAGMENT_NODE_TYPE = 11;\n\n/**\n * In IE (8-11) and Edge, appending nodes with no children is dramatically\n * faster than appending a full subtree, so we essentially queue up the\n * .appendChild calls here and apply them so each node is added to its parent\n * before any children are added.\n *\n * In other browsers, doing so is slower or neutral compared to the other order\n * (in Firefox, twice as slow) so we only do this inversion in IE.\n *\n * See https://github.com/spicyj/innerhtml-vs-createelement-vs-clonenode.\n */\nvar enableLazy = typeof document !== 'undefined' && typeof document.documentMode === 'number' || typeof navigator !== 'undefined' && typeof navigator.userAgent === 'string' && /\\bEdge\\/\\d/.test(navigator.userAgent);\n\nfunction insertTreeChildren(tree) {\n  if (!enableLazy) {\n    return;\n  }\n  var node = tree.node;\n  var children = tree.children;\n  if (children.length) {\n    for (var i = 0; i < children.length; i++) {\n      insertTreeBefore(node, children[i], null);\n    }\n  } else if (tree.html != null) {\n    setInnerHTML(node, tree.html);\n  } else if (tree.text != null) {\n    setTextContent(node, tree.text);\n  }\n}\n\nvar insertTreeBefore = createMicrosoftUnsafeLocalFunction(function (parentNode, tree, referenceNode) {\n  // DocumentFragments aren't actually part of the DOM after insertion so\n  // appending children won't update the DOM. We need to ensure the fragment\n  // is properly populated first, breaking out of our lazy approach for just\n  // this level. Also, some <object> plugins (like Flash Player) will read\n  // <param> nodes immediately upon insertion into the DOM, so <object>\n  // must also be populated prior to insertion into the DOM.\n  if (tree.node.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE || tree.node.nodeType === ELEMENT_NODE_TYPE && tree.node.nodeName.toLowerCase() === 'object' && (tree.node.namespaceURI == null || tree.node.namespaceURI === DOMNamespaces.html)) {\n    insertTreeChildren(tree);\n    parentNode.insertBefore(tree.node, referenceNode);\n  } else {\n    parentNode.insertBefore(tree.node, referenceNode);\n    insertTreeChildren(tree);\n  }\n});\n\nfunction replaceChildWithTree(oldNode, newTree) {\n  oldNode.parentNode.replaceChild(newTree.node, oldNode);\n  insertTreeChildren(newTree);\n}\n\nfunction queueChild(parentTree, childTree) {\n  if (enableLazy) {\n    parentTree.children.push(childTree);\n  } else {\n    parentTree.node.appendChild(childTree.node);\n  }\n}\n\nfunction queueHTML(tree, html) {\n  if (enableLazy) {\n    tree.html = html;\n  } else {\n    setInnerHTML(tree.node, html);\n  }\n}\n\nfunction queueText(tree, text) {\n  if (enableLazy) {\n    tree.text = text;\n  } else {\n    setTextContent(tree.node, text);\n  }\n}\n\nfunction toString() {\n  return this.node.nodeName;\n}\n\nfunction DOMLazyTree(node) {\n  return {\n    node: node,\n    children: [],\n    html: null,\n    text: null,\n    toString: toString\n  };\n}\n\nDOMLazyTree.insertTreeBefore = insertTreeBefore;\nDOMLazyTree.replaceChildWithTree = replaceChildWithTree;\nDOMLazyTree.queueChild = queueChild;\nDOMLazyTree.queueHTML = queueHTML;\nDOMLazyTree.queueText = queueText;\n\nmodule.exports = DOMLazyTree;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}