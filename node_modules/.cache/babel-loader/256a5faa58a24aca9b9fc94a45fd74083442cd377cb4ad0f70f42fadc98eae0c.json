{"ast":null,"code":"/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n'use strict';\n\nvar _assign = require('object-assign');\nvar CallbackQueue = require('./CallbackQueue');\nvar PooledClass = require('./PooledClass');\nvar ReactBrowserEventEmitter = require('./ReactBrowserEventEmitter');\nvar ReactInputSelection = require('./ReactInputSelection');\nvar ReactInstrumentation = require('./ReactInstrumentation');\nvar Transaction = require('./Transaction');\nvar ReactUpdateQueue = require('./ReactUpdateQueue');\n\n/**\n * Ensures that, when possible, the selection range (currently selected text\n * input) is not disturbed by performing the transaction.\n */\nvar SELECTION_RESTORATION = {\n  /**\n   * @return {Selection} Selection information.\n   */\n  initialize: ReactInputSelection.getSelectionInformation,\n  /**\n   * @param {Selection} sel Selection information returned from `initialize`.\n   */\n  close: ReactInputSelection.restoreSelection\n};\n\n/**\n * Suppresses events (blur/focus) that could be inadvertently dispatched due to\n * high level DOM manipulations (like temporarily removing a text input from the\n * DOM).\n */\nvar EVENT_SUPPRESSION = {\n  /**\n   * @return {boolean} The enabled status of `ReactBrowserEventEmitter` before\n   * the reconciliation.\n   */\n  initialize: function () {\n    var currentlyEnabled = ReactBrowserEventEmitter.isEnabled();\n    ReactBrowserEventEmitter.setEnabled(false);\n    return currentlyEnabled;\n  },\n  /**\n   * @param {boolean} previouslyEnabled Enabled status of\n   *   `ReactBrowserEventEmitter` before the reconciliation occurred. `close`\n   *   restores the previous value.\n   */\n  close: function (previouslyEnabled) {\n    ReactBrowserEventEmitter.setEnabled(previouslyEnabled);\n  }\n};\n\n/**\n * Provides a queue for collecting `componentDidMount` and\n * `componentDidUpdate` callbacks during the transaction.\n */\nvar ON_DOM_READY_QUEUEING = {\n  /**\n   * Initializes the internal `onDOMReady` queue.\n   */\n  initialize: function () {\n    this.reactMountReady.reset();\n  },\n  /**\n   * After DOM is flushed, invoke all registered `onDOMReady` callbacks.\n   */\n  close: function () {\n    this.reactMountReady.notifyAll();\n  }\n};\n\n/**\n * Executed within the scope of the `Transaction` instance. Consider these as\n * being member methods, but with an implied ordering while being isolated from\n * each other.\n */\nvar TRANSACTION_WRAPPERS = [SELECTION_RESTORATION, EVENT_SUPPRESSION, ON_DOM_READY_QUEUEING];\nif (process.env.NODE_ENV !== 'production') {\n  TRANSACTION_WRAPPERS.push({\n    initialize: ReactInstrumentation.debugTool.onBeginFlush,\n    close: ReactInstrumentation.debugTool.onEndFlush\n  });\n}\n\n/**\n * Currently:\n * - The order that these are listed in the transaction is critical:\n * - Suppresses events.\n * - Restores selection range.\n *\n * Future:\n * - Restore document/overflow scroll positions that were unintentionally\n *   modified via DOM insertions above the top viewport boundary.\n * - Implement/integrate with customized constraint based layout system and keep\n *   track of which dimensions must be remeasured.\n *\n * @class ReactReconcileTransaction\n */\nfunction ReactReconcileTransaction(useCreateElement) {\n  this.reinitializeTransaction();\n  // Only server-side rendering really needs this option (see\n  // `ReactServerRendering`), but server-side uses\n  // `ReactServerRenderingTransaction` instead. This option is here so that it's\n  // accessible and defaults to false when `ReactDOMComponent` and\n  // `ReactDOMTextComponent` checks it in `mountComponent`.`\n  this.renderToStaticMarkup = false;\n  this.reactMountReady = CallbackQueue.getPooled(null);\n  this.useCreateElement = useCreateElement;\n}\nvar Mixin = {\n  /**\n   * @see Transaction\n   * @abstract\n   * @final\n   * @return {array<object>} List of operation wrap procedures.\n   *   TODO: convert to array<TransactionWrapper>\n   */\n  getTransactionWrappers: function () {\n    return TRANSACTION_WRAPPERS;\n  },\n  /**\n   * @return {object} The queue to collect `onDOMReady` callbacks with.\n   */\n  getReactMountReady: function () {\n    return this.reactMountReady;\n  },\n  /**\n   * @return {object} The queue to collect React async events.\n   */\n  getUpdateQueue: function () {\n    return ReactUpdateQueue;\n  },\n  /**\n   * Save current transaction state -- if the return value from this method is\n   * passed to `rollback`, the transaction will be reset to that state.\n   */\n  checkpoint: function () {\n    // reactMountReady is the our only stateful wrapper\n    return this.reactMountReady.checkpoint();\n  },\n  rollback: function (checkpoint) {\n    this.reactMountReady.rollback(checkpoint);\n  },\n  /**\n   * `PooledClass` looks for this, and will invoke this before allowing this\n   * instance to be reused.\n   */\n  destructor: function () {\n    CallbackQueue.release(this.reactMountReady);\n    this.reactMountReady = null;\n  }\n};\n_assign(ReactReconcileTransaction.prototype, Transaction, Mixin);\nPooledClass.addPoolingTo(ReactReconcileTransaction);\nmodule.exports = ReactReconcileTransaction;","map":{"version":3,"names":["_assign","require","CallbackQueue","PooledClass","ReactBrowserEventEmitter","ReactInputSelection","ReactInstrumentation","Transaction","ReactUpdateQueue","SELECTION_RESTORATION","initialize","getSelectionInformation","close","restoreSelection","EVENT_SUPPRESSION","currentlyEnabled","isEnabled","setEnabled","previouslyEnabled","ON_DOM_READY_QUEUEING","reactMountReady","reset","notifyAll","TRANSACTION_WRAPPERS","process","env","NODE_ENV","push","debugTool","onBeginFlush","onEndFlush","ReactReconcileTransaction","useCreateElement","reinitializeTransaction","renderToStaticMarkup","getPooled","Mixin","getTransactionWrappers","getReactMountReady","getUpdateQueue","checkpoint","rollback","destructor","release","prototype","addPoolingTo","module","exports"],"sources":["D:/Project_CS/react_side/myapp/node_modules/react-file-viewer/node_modules/react-dom/lib/ReactReconcileTransaction.js"],"sourcesContent":["/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n'use strict';\n\nvar _assign = require('object-assign');\n\nvar CallbackQueue = require('./CallbackQueue');\nvar PooledClass = require('./PooledClass');\nvar ReactBrowserEventEmitter = require('./ReactBrowserEventEmitter');\nvar ReactInputSelection = require('./ReactInputSelection');\nvar ReactInstrumentation = require('./ReactInstrumentation');\nvar Transaction = require('./Transaction');\nvar ReactUpdateQueue = require('./ReactUpdateQueue');\n\n/**\n * Ensures that, when possible, the selection range (currently selected text\n * input) is not disturbed by performing the transaction.\n */\nvar SELECTION_RESTORATION = {\n  /**\n   * @return {Selection} Selection information.\n   */\n  initialize: ReactInputSelection.getSelectionInformation,\n  /**\n   * @param {Selection} sel Selection information returned from `initialize`.\n   */\n  close: ReactInputSelection.restoreSelection\n};\n\n/**\n * Suppresses events (blur/focus) that could be inadvertently dispatched due to\n * high level DOM manipulations (like temporarily removing a text input from the\n * DOM).\n */\nvar EVENT_SUPPRESSION = {\n  /**\n   * @return {boolean} The enabled status of `ReactBrowserEventEmitter` before\n   * the reconciliation.\n   */\n  initialize: function () {\n    var currentlyEnabled = ReactBrowserEventEmitter.isEnabled();\n    ReactBrowserEventEmitter.setEnabled(false);\n    return currentlyEnabled;\n  },\n\n  /**\n   * @param {boolean} previouslyEnabled Enabled status of\n   *   `ReactBrowserEventEmitter` before the reconciliation occurred. `close`\n   *   restores the previous value.\n   */\n  close: function (previouslyEnabled) {\n    ReactBrowserEventEmitter.setEnabled(previouslyEnabled);\n  }\n};\n\n/**\n * Provides a queue for collecting `componentDidMount` and\n * `componentDidUpdate` callbacks during the transaction.\n */\nvar ON_DOM_READY_QUEUEING = {\n  /**\n   * Initializes the internal `onDOMReady` queue.\n   */\n  initialize: function () {\n    this.reactMountReady.reset();\n  },\n\n  /**\n   * After DOM is flushed, invoke all registered `onDOMReady` callbacks.\n   */\n  close: function () {\n    this.reactMountReady.notifyAll();\n  }\n};\n\n/**\n * Executed within the scope of the `Transaction` instance. Consider these as\n * being member methods, but with an implied ordering while being isolated from\n * each other.\n */\nvar TRANSACTION_WRAPPERS = [SELECTION_RESTORATION, EVENT_SUPPRESSION, ON_DOM_READY_QUEUEING];\n\nif (process.env.NODE_ENV !== 'production') {\n  TRANSACTION_WRAPPERS.push({\n    initialize: ReactInstrumentation.debugTool.onBeginFlush,\n    close: ReactInstrumentation.debugTool.onEndFlush\n  });\n}\n\n/**\n * Currently:\n * - The order that these are listed in the transaction is critical:\n * - Suppresses events.\n * - Restores selection range.\n *\n * Future:\n * - Restore document/overflow scroll positions that were unintentionally\n *   modified via DOM insertions above the top viewport boundary.\n * - Implement/integrate with customized constraint based layout system and keep\n *   track of which dimensions must be remeasured.\n *\n * @class ReactReconcileTransaction\n */\nfunction ReactReconcileTransaction(useCreateElement) {\n  this.reinitializeTransaction();\n  // Only server-side rendering really needs this option (see\n  // `ReactServerRendering`), but server-side uses\n  // `ReactServerRenderingTransaction` instead. This option is here so that it's\n  // accessible and defaults to false when `ReactDOMComponent` and\n  // `ReactDOMTextComponent` checks it in `mountComponent`.`\n  this.renderToStaticMarkup = false;\n  this.reactMountReady = CallbackQueue.getPooled(null);\n  this.useCreateElement = useCreateElement;\n}\n\nvar Mixin = {\n  /**\n   * @see Transaction\n   * @abstract\n   * @final\n   * @return {array<object>} List of operation wrap procedures.\n   *   TODO: convert to array<TransactionWrapper>\n   */\n  getTransactionWrappers: function () {\n    return TRANSACTION_WRAPPERS;\n  },\n\n  /**\n   * @return {object} The queue to collect `onDOMReady` callbacks with.\n   */\n  getReactMountReady: function () {\n    return this.reactMountReady;\n  },\n\n  /**\n   * @return {object} The queue to collect React async events.\n   */\n  getUpdateQueue: function () {\n    return ReactUpdateQueue;\n  },\n\n  /**\n   * Save current transaction state -- if the return value from this method is\n   * passed to `rollback`, the transaction will be reset to that state.\n   */\n  checkpoint: function () {\n    // reactMountReady is the our only stateful wrapper\n    return this.reactMountReady.checkpoint();\n  },\n\n  rollback: function (checkpoint) {\n    this.reactMountReady.rollback(checkpoint);\n  },\n\n  /**\n   * `PooledClass` looks for this, and will invoke this before allowing this\n   * instance to be reused.\n   */\n  destructor: function () {\n    CallbackQueue.release(this.reactMountReady);\n    this.reactMountReady = null;\n  }\n};\n\n_assign(ReactReconcileTransaction.prototype, Transaction, Mixin);\n\nPooledClass.addPoolingTo(ReactReconcileTransaction);\n\nmodule.exports = ReactReconcileTransaction;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}