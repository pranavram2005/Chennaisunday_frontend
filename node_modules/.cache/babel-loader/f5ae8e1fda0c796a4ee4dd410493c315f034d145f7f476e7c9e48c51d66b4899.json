{"ast":null,"code":"/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n'use strict';\n\nvar adler32 = require('./adler32');\nvar TAG_END = /\\/?>/;\nvar COMMENT_START = /^<\\!\\-\\-/;\nvar ReactMarkupChecksum = {\n  CHECKSUM_ATTR_NAME: 'data-react-checksum',\n  /**\n   * @param {string} markup Markup string\n   * @return {string} Markup string with checksum attribute attached\n   */\n  addChecksumToMarkup: function (markup) {\n    var checksum = adler32(markup);\n\n    // Add checksum (handle both parent tags, comments and self-closing tags)\n    if (COMMENT_START.test(markup)) {\n      return markup;\n    } else {\n      return markup.replace(TAG_END, ' ' + ReactMarkupChecksum.CHECKSUM_ATTR_NAME + '=\"' + checksum + '\"$&');\n    }\n  },\n  /**\n   * @param {string} markup to use\n   * @param {DOMElement} element root React element\n   * @returns {boolean} whether or not the markup is the same\n   */\n  canReuseMarkup: function (markup, element) {\n    var existingChecksum = element.getAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);\n    existingChecksum = existingChecksum && parseInt(existingChecksum, 10);\n    var markupChecksum = adler32(markup);\n    return markupChecksum === existingChecksum;\n  }\n};\nmodule.exports = ReactMarkupChecksum;","map":{"version":3,"names":["adler32","require","TAG_END","COMMENT_START","ReactMarkupChecksum","CHECKSUM_ATTR_NAME","addChecksumToMarkup","markup","checksum","test","replace","canReuseMarkup","element","existingChecksum","getAttribute","parseInt","markupChecksum","module","exports"],"sources":["D:/Project_CS/react_side/myapp/node_modules/react-file-viewer/node_modules/react-dom/lib/ReactMarkupChecksum.js"],"sourcesContent":["/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n'use strict';\n\nvar adler32 = require('./adler32');\n\nvar TAG_END = /\\/?>/;\nvar COMMENT_START = /^<\\!\\-\\-/;\n\nvar ReactMarkupChecksum = {\n  CHECKSUM_ATTR_NAME: 'data-react-checksum',\n\n  /**\n   * @param {string} markup Markup string\n   * @return {string} Markup string with checksum attribute attached\n   */\n  addChecksumToMarkup: function (markup) {\n    var checksum = adler32(markup);\n\n    // Add checksum (handle both parent tags, comments and self-closing tags)\n    if (COMMENT_START.test(markup)) {\n      return markup;\n    } else {\n      return markup.replace(TAG_END, ' ' + ReactMarkupChecksum.CHECKSUM_ATTR_NAME + '=\"' + checksum + '\"$&');\n    }\n  },\n\n  /**\n   * @param {string} markup to use\n   * @param {DOMElement} element root React element\n   * @returns {boolean} whether or not the markup is the same\n   */\n  canReuseMarkup: function (markup, element) {\n    var existingChecksum = element.getAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);\n    existingChecksum = existingChecksum && parseInt(existingChecksum, 10);\n    var markupChecksum = adler32(markup);\n    return markupChecksum === existingChecksum;\n  }\n};\n\nmodule.exports = ReactMarkupChecksum;"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ,IAAIA,OAAO,GAAGC,OAAO,CAAC,WAAW,CAAC;AAElC,IAAIC,OAAO,GAAG,MAAM;AACpB,IAAIC,aAAa,GAAG,UAAU;AAE9B,IAAIC,mBAAmB,GAAG;EACxBC,kBAAkB,EAAE,qBAAqB;EAEzC;AACF;AACA;AACA;EACEC,mBAAmB,EAAE,SAAAA,CAAUC,MAAM,EAAE;IACrC,IAAIC,QAAQ,GAAGR,OAAO,CAACO,MAAM,CAAC;;IAE9B;IACA,IAAIJ,aAAa,CAACM,IAAI,CAACF,MAAM,CAAC,EAAE;MAC9B,OAAOA,MAAM;IACf,CAAC,MAAM;MACL,OAAOA,MAAM,CAACG,OAAO,CAACR,OAAO,EAAE,GAAG,GAAGE,mBAAmB,CAACC,kBAAkB,GAAG,IAAI,GAAGG,QAAQ,GAAG,KAAK,CAAC;IACxG;EACF,CAAC;EAED;AACF;AACA;AACA;AACA;EACEG,cAAc,EAAE,SAAAA,CAAUJ,MAAM,EAAEK,OAAO,EAAE;IACzC,IAAIC,gBAAgB,GAAGD,OAAO,CAACE,YAAY,CAACV,mBAAmB,CAACC,kBAAkB,CAAC;IACnFQ,gBAAgB,GAAGA,gBAAgB,IAAIE,QAAQ,CAACF,gBAAgB,EAAE,EAAE,CAAC;IACrE,IAAIG,cAAc,GAAGhB,OAAO,CAACO,MAAM,CAAC;IACpC,OAAOS,cAAc,KAAKH,gBAAgB;EAC5C;AACF,CAAC;AAEDI,MAAM,CAACC,OAAO,GAAGd,mBAAmB","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}