{"ast":null,"code":"/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n'use strict';\n\nvar _prodInvariant = require('./reactProdInvariant'),\n  _assign = require('object-assign');\nvar LinkedValueUtils = require('./LinkedValueUtils');\nvar ReactDOMComponentTree = require('./ReactDOMComponentTree');\nvar ReactUpdates = require('./ReactUpdates');\nvar invariant = require('fbjs/lib/invariant');\nvar warning = require('fbjs/lib/warning');\nvar didWarnValueLink = false;\nvar didWarnValDefaultVal = false;\nfunction forceUpdateIfMounted() {\n  if (this._rootNodeID) {\n    // DOM component is still mounted; update\n    ReactDOMTextarea.updateWrapper(this);\n  }\n}\n\n/**\n * Implements a <textarea> host component that allows setting `value`, and\n * `defaultValue`. This differs from the traditional DOM API because value is\n * usually set as PCDATA children.\n *\n * If `value` is not supplied (or null/undefined), user actions that affect the\n * value will trigger updates to the element.\n *\n * If `value` is supplied (and not null/undefined), the rendered element will\n * not trigger updates to the element. Instead, the `value` prop must change in\n * order for the rendered element to be updated.\n *\n * The rendered element will be initialized with an empty value, the prop\n * `defaultValue` if specified, or the children content (deprecated).\n */\nvar ReactDOMTextarea = {\n  getHostProps: function (inst, props) {\n    !(props.dangerouslySetInnerHTML == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, '`dangerouslySetInnerHTML` does not make sense on <textarea>.') : _prodInvariant('91') : void 0;\n\n    // Always set children to the same thing. In IE9, the selection range will\n    // get reset if `textContent` is mutated.  We could add a check in setTextContent\n    // to only set the value if/when the value differs from the node value (which would\n    // completely solve this IE9 bug), but Sebastian+Ben seemed to like this solution.\n    // The value can be a boolean or object so that's why it's forced to be a string.\n    var hostProps = _assign({}, props, {\n      value: undefined,\n      defaultValue: undefined,\n      children: '' + inst._wrapperState.initialValue,\n      onChange: inst._wrapperState.onChange\n    });\n    return hostProps;\n  },\n  mountWrapper: function (inst, props) {\n    if (process.env.NODE_ENV !== 'production') {\n      LinkedValueUtils.checkPropTypes('textarea', props, inst._currentElement._owner);\n      if (props.valueLink !== undefined && !didWarnValueLink) {\n        process.env.NODE_ENV !== 'production' ? warning(false, '`valueLink` prop on `textarea` is deprecated; set `value` and `onChange` instead.') : void 0;\n        didWarnValueLink = true;\n      }\n      if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValDefaultVal) {\n        process.env.NODE_ENV !== 'production' ? warning(false, 'Textarea elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled textarea ' + 'and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components') : void 0;\n        didWarnValDefaultVal = true;\n      }\n    }\n    var value = LinkedValueUtils.getValue(props);\n    var initialValue = value;\n\n    // Only bother fetching default value if we're going to use it\n    if (value == null) {\n      var defaultValue = props.defaultValue;\n      // TODO (yungsters): Remove support for children content in <textarea>.\n      var children = props.children;\n      if (children != null) {\n        if (process.env.NODE_ENV !== 'production') {\n          process.env.NODE_ENV !== 'production' ? warning(false, 'Use the `defaultValue` or `value` props instead of setting ' + 'children on <textarea>.') : void 0;\n        }\n        !(defaultValue == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'If you supply `defaultValue` on a <textarea>, do not pass children.') : _prodInvariant('92') : void 0;\n        if (Array.isArray(children)) {\n          !(children.length <= 1) ? process.env.NODE_ENV !== 'production' ? invariant(false, '<textarea> can only have at most one child.') : _prodInvariant('93') : void 0;\n          children = children[0];\n        }\n        defaultValue = '' + children;\n      }\n      if (defaultValue == null) {\n        defaultValue = '';\n      }\n      initialValue = defaultValue;\n    }\n    inst._wrapperState = {\n      initialValue: '' + initialValue,\n      listeners: null,\n      onChange: _handleChange.bind(inst)\n    };\n  },\n  updateWrapper: function (inst) {\n    var props = inst._currentElement.props;\n    var node = ReactDOMComponentTree.getNodeFromInstance(inst);\n    var value = LinkedValueUtils.getValue(props);\n    if (value != null) {\n      // Cast `value` to a string to ensure the value is set correctly. While\n      // browsers typically do this as necessary, jsdom doesn't.\n      var newValue = '' + value;\n\n      // To avoid side effects (such as losing text selection), only set value if changed\n      if (newValue !== node.value) {\n        node.value = newValue;\n      }\n      if (props.defaultValue == null) {\n        node.defaultValue = newValue;\n      }\n    }\n    if (props.defaultValue != null) {\n      node.defaultValue = props.defaultValue;\n    }\n  },\n  postMountWrapper: function (inst) {\n    // This is in postMount because we need access to the DOM node, which is not\n    // available until after the component has mounted.\n    var node = ReactDOMComponentTree.getNodeFromInstance(inst);\n    var textContent = node.textContent;\n\n    // Only set node.value if textContent is equal to the expected\n    // initial value. In IE10/IE11 there is a bug where the placeholder attribute\n    // will populate textContent as well.\n    // https://developer.microsoft.com/microsoft-edge/platform/issues/101525/\n    if (textContent === inst._wrapperState.initialValue) {\n      node.value = textContent;\n    }\n  }\n};\nfunction _handleChange(event) {\n  var props = this._currentElement.props;\n  var returnValue = LinkedValueUtils.executeOnChange(props, event);\n  ReactUpdates.asap(forceUpdateIfMounted, this);\n  return returnValue;\n}\nmodule.exports = ReactDOMTextarea;","map":{"version":3,"names":["_prodInvariant","require","_assign","LinkedValueUtils","ReactDOMComponentTree","ReactUpdates","invariant","warning","didWarnValueLink","didWarnValDefaultVal","forceUpdateIfMounted","_rootNodeID","ReactDOMTextarea","updateWrapper","getHostProps","inst","props","dangerouslySetInnerHTML","process","env","NODE_ENV","hostProps","value","undefined","defaultValue","children","_wrapperState","initialValue","onChange","mountWrapper","checkPropTypes","_currentElement","_owner","valueLink","getValue","Array","isArray","length","listeners","_handleChange","bind","node","getNodeFromInstance","newValue","postMountWrapper","textContent","event","returnValue","executeOnChange","asap","module","exports"],"sources":["D:/Project_CS/react_side/myapp/node_modules/react-file-viewer/node_modules/react-dom/lib/ReactDOMTextarea.js"],"sourcesContent":["/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n'use strict';\n\nvar _prodInvariant = require('./reactProdInvariant'),\n    _assign = require('object-assign');\n\nvar LinkedValueUtils = require('./LinkedValueUtils');\nvar ReactDOMComponentTree = require('./ReactDOMComponentTree');\nvar ReactUpdates = require('./ReactUpdates');\n\nvar invariant = require('fbjs/lib/invariant');\nvar warning = require('fbjs/lib/warning');\n\nvar didWarnValueLink = false;\nvar didWarnValDefaultVal = false;\n\nfunction forceUpdateIfMounted() {\n  if (this._rootNodeID) {\n    // DOM component is still mounted; update\n    ReactDOMTextarea.updateWrapper(this);\n  }\n}\n\n/**\n * Implements a <textarea> host component that allows setting `value`, and\n * `defaultValue`. This differs from the traditional DOM API because value is\n * usually set as PCDATA children.\n *\n * If `value` is not supplied (or null/undefined), user actions that affect the\n * value will trigger updates to the element.\n *\n * If `value` is supplied (and not null/undefined), the rendered element will\n * not trigger updates to the element. Instead, the `value` prop must change in\n * order for the rendered element to be updated.\n *\n * The rendered element will be initialized with an empty value, the prop\n * `defaultValue` if specified, or the children content (deprecated).\n */\nvar ReactDOMTextarea = {\n  getHostProps: function (inst, props) {\n    !(props.dangerouslySetInnerHTML == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, '`dangerouslySetInnerHTML` does not make sense on <textarea>.') : _prodInvariant('91') : void 0;\n\n    // Always set children to the same thing. In IE9, the selection range will\n    // get reset if `textContent` is mutated.  We could add a check in setTextContent\n    // to only set the value if/when the value differs from the node value (which would\n    // completely solve this IE9 bug), but Sebastian+Ben seemed to like this solution.\n    // The value can be a boolean or object so that's why it's forced to be a string.\n    var hostProps = _assign({}, props, {\n      value: undefined,\n      defaultValue: undefined,\n      children: '' + inst._wrapperState.initialValue,\n      onChange: inst._wrapperState.onChange\n    });\n\n    return hostProps;\n  },\n\n  mountWrapper: function (inst, props) {\n    if (process.env.NODE_ENV !== 'production') {\n      LinkedValueUtils.checkPropTypes('textarea', props, inst._currentElement._owner);\n      if (props.valueLink !== undefined && !didWarnValueLink) {\n        process.env.NODE_ENV !== 'production' ? warning(false, '`valueLink` prop on `textarea` is deprecated; set `value` and `onChange` instead.') : void 0;\n        didWarnValueLink = true;\n      }\n      if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValDefaultVal) {\n        process.env.NODE_ENV !== 'production' ? warning(false, 'Textarea elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled textarea ' + 'and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components') : void 0;\n        didWarnValDefaultVal = true;\n      }\n    }\n\n    var value = LinkedValueUtils.getValue(props);\n    var initialValue = value;\n\n    // Only bother fetching default value if we're going to use it\n    if (value == null) {\n      var defaultValue = props.defaultValue;\n      // TODO (yungsters): Remove support for children content in <textarea>.\n      var children = props.children;\n      if (children != null) {\n        if (process.env.NODE_ENV !== 'production') {\n          process.env.NODE_ENV !== 'production' ? warning(false, 'Use the `defaultValue` or `value` props instead of setting ' + 'children on <textarea>.') : void 0;\n        }\n        !(defaultValue == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'If you supply `defaultValue` on a <textarea>, do not pass children.') : _prodInvariant('92') : void 0;\n        if (Array.isArray(children)) {\n          !(children.length <= 1) ? process.env.NODE_ENV !== 'production' ? invariant(false, '<textarea> can only have at most one child.') : _prodInvariant('93') : void 0;\n          children = children[0];\n        }\n\n        defaultValue = '' + children;\n      }\n      if (defaultValue == null) {\n        defaultValue = '';\n      }\n      initialValue = defaultValue;\n    }\n\n    inst._wrapperState = {\n      initialValue: '' + initialValue,\n      listeners: null,\n      onChange: _handleChange.bind(inst)\n    };\n  },\n\n  updateWrapper: function (inst) {\n    var props = inst._currentElement.props;\n\n    var node = ReactDOMComponentTree.getNodeFromInstance(inst);\n    var value = LinkedValueUtils.getValue(props);\n    if (value != null) {\n      // Cast `value` to a string to ensure the value is set correctly. While\n      // browsers typically do this as necessary, jsdom doesn't.\n      var newValue = '' + value;\n\n      // To avoid side effects (such as losing text selection), only set value if changed\n      if (newValue !== node.value) {\n        node.value = newValue;\n      }\n      if (props.defaultValue == null) {\n        node.defaultValue = newValue;\n      }\n    }\n    if (props.defaultValue != null) {\n      node.defaultValue = props.defaultValue;\n    }\n  },\n\n  postMountWrapper: function (inst) {\n    // This is in postMount because we need access to the DOM node, which is not\n    // available until after the component has mounted.\n    var node = ReactDOMComponentTree.getNodeFromInstance(inst);\n    var textContent = node.textContent;\n\n    // Only set node.value if textContent is equal to the expected\n    // initial value. In IE10/IE11 there is a bug where the placeholder attribute\n    // will populate textContent as well.\n    // https://developer.microsoft.com/microsoft-edge/platform/issues/101525/\n    if (textContent === inst._wrapperState.initialValue) {\n      node.value = textContent;\n    }\n  }\n};\n\nfunction _handleChange(event) {\n  var props = this._currentElement.props;\n  var returnValue = LinkedValueUtils.executeOnChange(props, event);\n  ReactUpdates.asap(forceUpdateIfMounted, this);\n  return returnValue;\n}\n\nmodule.exports = ReactDOMTextarea;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}