{"ast":null,"code":"/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n'use strict';\n\nvar _prodInvariant = require('./reactProdInvariant');\nvar DOMLazyTree = require('./DOMLazyTree');\nvar ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');\nvar createNodesFromMarkup = require('fbjs/lib/createNodesFromMarkup');\nvar emptyFunction = require('fbjs/lib/emptyFunction');\nvar invariant = require('fbjs/lib/invariant');\nvar Danger = {\n  /**\n   * Replaces a node with a string of markup at its current position within its\n   * parent. The markup must render into a single root node.\n   *\n   * @param {DOMElement} oldChild Child node to replace.\n   * @param {string} markup Markup to render in place of the child node.\n   * @internal\n   */\n  dangerouslyReplaceNodeWithMarkup: function (oldChild, markup) {\n    !ExecutionEnvironment.canUseDOM ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Cannot render markup in a worker thread. Make sure `window` and `document` are available globally before requiring React when unit testing or use ReactDOMServer.renderToString() for server rendering.') : _prodInvariant('56') : void 0;\n    !markup ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Missing markup.') : _prodInvariant('57') : void 0;\n    !(oldChild.nodeName !== 'HTML') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Cannot replace markup of the <html> node. This is because browser quirks make this unreliable and/or slow. If you want to render to the root you must use server rendering. See ReactDOMServer.renderToString().') : _prodInvariant('58') : void 0;\n    if (typeof markup === 'string') {\n      var newChild = createNodesFromMarkup(markup, emptyFunction)[0];\n      oldChild.parentNode.replaceChild(newChild, oldChild);\n    } else {\n      DOMLazyTree.replaceChildWithTree(oldChild, markup);\n    }\n  }\n};\nmodule.exports = Danger;","map":{"version":3,"names":["_prodInvariant","require","DOMLazyTree","ExecutionEnvironment","createNodesFromMarkup","emptyFunction","invariant","Danger","dangerouslyReplaceNodeWithMarkup","oldChild","markup","canUseDOM","process","env","NODE_ENV","nodeName","newChild","parentNode","replaceChild","replaceChildWithTree","module","exports"],"sources":["D:/Project_CS/react_side/myapp/node_modules/react-file-viewer/node_modules/react-dom/lib/Danger.js"],"sourcesContent":["/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n'use strict';\n\nvar _prodInvariant = require('./reactProdInvariant');\n\nvar DOMLazyTree = require('./DOMLazyTree');\nvar ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');\n\nvar createNodesFromMarkup = require('fbjs/lib/createNodesFromMarkup');\nvar emptyFunction = require('fbjs/lib/emptyFunction');\nvar invariant = require('fbjs/lib/invariant');\n\nvar Danger = {\n  /**\n   * Replaces a node with a string of markup at its current position within its\n   * parent. The markup must render into a single root node.\n   *\n   * @param {DOMElement} oldChild Child node to replace.\n   * @param {string} markup Markup to render in place of the child node.\n   * @internal\n   */\n  dangerouslyReplaceNodeWithMarkup: function (oldChild, markup) {\n    !ExecutionEnvironment.canUseDOM ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Cannot render markup in a worker thread. Make sure `window` and `document` are available globally before requiring React when unit testing or use ReactDOMServer.renderToString() for server rendering.') : _prodInvariant('56') : void 0;\n    !markup ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Missing markup.') : _prodInvariant('57') : void 0;\n    !(oldChild.nodeName !== 'HTML') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Cannot replace markup of the <html> node. This is because browser quirks make this unreliable and/or slow. If you want to render to the root you must use server rendering. See ReactDOMServer.renderToString().') : _prodInvariant('58') : void 0;\n\n    if (typeof markup === 'string') {\n      var newChild = createNodesFromMarkup(markup, emptyFunction)[0];\n      oldChild.parentNode.replaceChild(newChild, oldChild);\n    } else {\n      DOMLazyTree.replaceChildWithTree(oldChild, markup);\n    }\n  }\n};\n\nmodule.exports = Danger;"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ,IAAIA,cAAc,GAAGC,OAAO,CAAC,sBAAsB,CAAC;AAEpD,IAAIC,WAAW,GAAGD,OAAO,CAAC,eAAe,CAAC;AAC1C,IAAIE,oBAAoB,GAAGF,OAAO,CAAC,+BAA+B,CAAC;AAEnE,IAAIG,qBAAqB,GAAGH,OAAO,CAAC,gCAAgC,CAAC;AACrE,IAAII,aAAa,GAAGJ,OAAO,CAAC,wBAAwB,CAAC;AACrD,IAAIK,SAAS,GAAGL,OAAO,CAAC,oBAAoB,CAAC;AAE7C,IAAIM,MAAM,GAAG;EACX;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACEC,gCAAgC,EAAE,SAAAA,CAAUC,QAAQ,EAAEC,MAAM,EAAE;IAC5D,CAACP,oBAAoB,CAACQ,SAAS,GAAGC,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,GAAGR,SAAS,CAAC,KAAK,EAAE,gPAAgP,CAAC,GAAGN,cAAc,CAAC,IAAI,CAAC,GAAG,KAAK,CAAC;IAC5W,CAACU,MAAM,GAAGE,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,GAAGR,SAAS,CAAC,KAAK,EAAE,wDAAwD,CAAC,GAAGN,cAAc,CAAC,IAAI,CAAC,GAAG,KAAK,CAAC;IAC5J,EAAES,QAAQ,CAACM,QAAQ,KAAK,MAAM,CAAC,GAAGH,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,GAAGR,SAAS,CAAC,KAAK,EAAE,yPAAyP,CAAC,GAAGN,cAAc,CAAC,IAAI,CAAC,GAAG,KAAK,CAAC;IAErX,IAAI,OAAOU,MAAM,KAAK,QAAQ,EAAE;MAC9B,IAAIM,QAAQ,GAAGZ,qBAAqB,CAACM,MAAM,EAAEL,aAAa,CAAC,CAAC,CAAC,CAAC;MAC9DI,QAAQ,CAACQ,UAAU,CAACC,YAAY,CAACF,QAAQ,EAAEP,QAAQ,CAAC;IACtD,CAAC,MAAM;MACLP,WAAW,CAACiB,oBAAoB,CAACV,QAAQ,EAAEC,MAAM,CAAC;IACpD;EACF;AACF,CAAC;AAEDU,MAAM,CAACC,OAAO,GAAGd,MAAM","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}