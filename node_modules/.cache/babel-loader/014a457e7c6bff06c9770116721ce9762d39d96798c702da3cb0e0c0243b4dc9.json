{"ast":null,"code":"/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n'use strict';\n\nvar _prodInvariant = require('./reactProdInvariant');\nvar ReactComponentEnvironment = require('./ReactComponentEnvironment');\nvar ReactInstanceMap = require('./ReactInstanceMap');\nvar ReactInstrumentation = require('./ReactInstrumentation');\nvar ReactCurrentOwner = require('react/lib/ReactCurrentOwner');\nvar ReactReconciler = require('./ReactReconciler');\nvar ReactChildReconciler = require('./ReactChildReconciler');\nvar emptyFunction = require('fbjs/lib/emptyFunction');\nvar flattenChildren = require('./flattenChildren');\nvar invariant = require('fbjs/lib/invariant');\n\n/**\n * Make an update for markup to be rendered and inserted at a supplied index.\n *\n * @param {string} markup Markup that renders into an element.\n * @param {number} toIndex Destination index.\n * @private\n */\nfunction makeInsertMarkup(markup, afterNode, toIndex) {\n  // NOTE: Null values reduce hidden classes.\n  return {\n    type: 'INSERT_MARKUP',\n    content: markup,\n    fromIndex: null,\n    fromNode: null,\n    toIndex: toIndex,\n    afterNode: afterNode\n  };\n}\n\n/**\n * Make an update for moving an existing element to another index.\n *\n * @param {number} fromIndex Source index of the existing element.\n * @param {number} toIndex Destination index of the element.\n * @private\n */\nfunction makeMove(child, afterNode, toIndex) {\n  // NOTE: Null values reduce hidden classes.\n  return {\n    type: 'MOVE_EXISTING',\n    content: null,\n    fromIndex: child._mountIndex,\n    fromNode: ReactReconciler.getHostNode(child),\n    toIndex: toIndex,\n    afterNode: afterNode\n  };\n}\n\n/**\n * Make an update for removing an element at an index.\n *\n * @param {number} fromIndex Index of the element to remove.\n * @private\n */\nfunction makeRemove(child, node) {\n  // NOTE: Null values reduce hidden classes.\n  return {\n    type: 'REMOVE_NODE',\n    content: null,\n    fromIndex: child._mountIndex,\n    fromNode: node,\n    toIndex: null,\n    afterNode: null\n  };\n}\n\n/**\n * Make an update for setting the markup of a node.\n *\n * @param {string} markup Markup that renders into an element.\n * @private\n */\nfunction makeSetMarkup(markup) {\n  // NOTE: Null values reduce hidden classes.\n  return {\n    type: 'SET_MARKUP',\n    content: markup,\n    fromIndex: null,\n    fromNode: null,\n    toIndex: null,\n    afterNode: null\n  };\n}\n\n/**\n * Make an update for setting the text content.\n *\n * @param {string} textContent Text content to set.\n * @private\n */\nfunction makeTextContent(textContent) {\n  // NOTE: Null values reduce hidden classes.\n  return {\n    type: 'TEXT_CONTENT',\n    content: textContent,\n    fromIndex: null,\n    fromNode: null,\n    toIndex: null,\n    afterNode: null\n  };\n}\n\n/**\n * Push an update, if any, onto the queue. Creates a new queue if none is\n * passed and always returns the queue. Mutative.\n */\nfunction enqueue(queue, update) {\n  if (update) {\n    queue = queue || [];\n    queue.push(update);\n  }\n  return queue;\n}\n\n/**\n * Processes any enqueued updates.\n *\n * @private\n */\nfunction processQueue(inst, updateQueue) {\n  ReactComponentEnvironment.processChildrenUpdates(inst, updateQueue);\n}\nvar setChildrenForInstrumentation = emptyFunction;\nif (process.env.NODE_ENV !== 'production') {\n  var getDebugID = function (inst) {\n    if (!inst._debugID) {\n      // Check for ART-like instances. TODO: This is silly/gross.\n      var internal;\n      if (internal = ReactInstanceMap.get(inst)) {\n        inst = internal;\n      }\n    }\n    return inst._debugID;\n  };\n  setChildrenForInstrumentation = function (children) {\n    var debugID = getDebugID(this);\n    // TODO: React Native empty components are also multichild.\n    // This means they still get into this method but don't have _debugID.\n    if (debugID !== 0) {\n      ReactInstrumentation.debugTool.onSetChildren(debugID, children ? Object.keys(children).map(function (key) {\n        return children[key]._debugID;\n      }) : []);\n    }\n  };\n}\n\n/**\n * ReactMultiChild are capable of reconciling multiple children.\n *\n * @class ReactMultiChild\n * @internal\n */\nvar ReactMultiChild = {\n  /**\n   * Provides common functionality for components that must reconcile multiple\n   * children. This is used by `ReactDOMComponent` to mount, update, and\n   * unmount child components.\n   *\n   * @lends {ReactMultiChild.prototype}\n   */\n  Mixin: {\n    _reconcilerInstantiateChildren: function (nestedChildren, transaction, context) {\n      if (process.env.NODE_ENV !== 'production') {\n        var selfDebugID = getDebugID(this);\n        if (this._currentElement) {\n          try {\n            ReactCurrentOwner.current = this._currentElement._owner;\n            return ReactChildReconciler.instantiateChildren(nestedChildren, transaction, context, selfDebugID);\n          } finally {\n            ReactCurrentOwner.current = null;\n          }\n        }\n      }\n      return ReactChildReconciler.instantiateChildren(nestedChildren, transaction, context);\n    },\n    _reconcilerUpdateChildren: function (prevChildren, nextNestedChildrenElements, mountImages, removedNodes, transaction, context) {\n      var nextChildren;\n      var selfDebugID = 0;\n      if (process.env.NODE_ENV !== 'production') {\n        selfDebugID = getDebugID(this);\n        if (this._currentElement) {\n          try {\n            ReactCurrentOwner.current = this._currentElement._owner;\n            nextChildren = flattenChildren(nextNestedChildrenElements, selfDebugID);\n          } finally {\n            ReactCurrentOwner.current = null;\n          }\n          ReactChildReconciler.updateChildren(prevChildren, nextChildren, mountImages, removedNodes, transaction, this, this._hostContainerInfo, context, selfDebugID);\n          return nextChildren;\n        }\n      }\n      nextChildren = flattenChildren(nextNestedChildrenElements, selfDebugID);\n      ReactChildReconciler.updateChildren(prevChildren, nextChildren, mountImages, removedNodes, transaction, this, this._hostContainerInfo, context, selfDebugID);\n      return nextChildren;\n    },\n    /**\n     * Generates a \"mount image\" for each of the supplied children. In the case\n     * of `ReactDOMComponent`, a mount image is a string of markup.\n     *\n     * @param {?object} nestedChildren Nested child maps.\n     * @return {array} An array of mounted representations.\n     * @internal\n     */\n    mountChildren: function (nestedChildren, transaction, context) {\n      var children = this._reconcilerInstantiateChildren(nestedChildren, transaction, context);\n      this._renderedChildren = children;\n      var mountImages = [];\n      var index = 0;\n      for (var name in children) {\n        if (children.hasOwnProperty(name)) {\n          var child = children[name];\n          var selfDebugID = 0;\n          if (process.env.NODE_ENV !== 'production') {\n            selfDebugID = getDebugID(this);\n          }\n          var mountImage = ReactReconciler.mountComponent(child, transaction, this, this._hostContainerInfo, context, selfDebugID);\n          child._mountIndex = index++;\n          mountImages.push(mountImage);\n        }\n      }\n      if (process.env.NODE_ENV !== 'production') {\n        setChildrenForInstrumentation.call(this, children);\n      }\n      return mountImages;\n    },\n    /**\n     * Replaces any rendered children with a text content string.\n     *\n     * @param {string} nextContent String of content.\n     * @internal\n     */\n    updateTextContent: function (nextContent) {\n      var prevChildren = this._renderedChildren;\n      // Remove any rendered children.\n      ReactChildReconciler.unmountChildren(prevChildren, false);\n      for (var name in prevChildren) {\n        if (prevChildren.hasOwnProperty(name)) {\n          !false ? process.env.NODE_ENV !== 'production' ? invariant(false, 'updateTextContent called on non-empty component.') : _prodInvariant('118') : void 0;\n        }\n      }\n      // Set new text content.\n      var updates = [makeTextContent(nextContent)];\n      processQueue(this, updates);\n    },\n    /**\n     * Replaces any rendered children with a markup string.\n     *\n     * @param {string} nextMarkup String of markup.\n     * @internal\n     */\n    updateMarkup: function (nextMarkup) {\n      var prevChildren = this._renderedChildren;\n      // Remove any rendered children.\n      ReactChildReconciler.unmountChildren(prevChildren, false);\n      for (var name in prevChildren) {\n        if (prevChildren.hasOwnProperty(name)) {\n          !false ? process.env.NODE_ENV !== 'production' ? invariant(false, 'updateTextContent called on non-empty component.') : _prodInvariant('118') : void 0;\n        }\n      }\n      var updates = [makeSetMarkup(nextMarkup)];\n      processQueue(this, updates);\n    },\n    /**\n     * Updates the rendered children with new children.\n     *\n     * @param {?object} nextNestedChildrenElements Nested child element maps.\n     * @param {ReactReconcileTransaction} transaction\n     * @internal\n     */\n    updateChildren: function (nextNestedChildrenElements, transaction, context) {\n      // Hook used by React ART\n      this._updateChildren(nextNestedChildrenElements, transaction, context);\n    },\n    /**\n     * @param {?object} nextNestedChildrenElements Nested child element maps.\n     * @param {ReactReconcileTransaction} transaction\n     * @final\n     * @protected\n     */\n    _updateChildren: function (nextNestedChildrenElements, transaction, context) {\n      var prevChildren = this._renderedChildren;\n      var removedNodes = {};\n      var mountImages = [];\n      var nextChildren = this._reconcilerUpdateChildren(prevChildren, nextNestedChildrenElements, mountImages, removedNodes, transaction, context);\n      if (!nextChildren && !prevChildren) {\n        return;\n      }\n      var updates = null;\n      var name;\n      // `nextIndex` will increment for each child in `nextChildren`, but\n      // `lastIndex` will be the last index visited in `prevChildren`.\n      var nextIndex = 0;\n      var lastIndex = 0;\n      // `nextMountIndex` will increment for each newly mounted child.\n      var nextMountIndex = 0;\n      var lastPlacedNode = null;\n      for (name in nextChildren) {\n        if (!nextChildren.hasOwnProperty(name)) {\n          continue;\n        }\n        var prevChild = prevChildren && prevChildren[name];\n        var nextChild = nextChildren[name];\n        if (prevChild === nextChild) {\n          updates = enqueue(updates, this.moveChild(prevChild, lastPlacedNode, nextIndex, lastIndex));\n          lastIndex = Math.max(prevChild._mountIndex, lastIndex);\n          prevChild._mountIndex = nextIndex;\n        } else {\n          if (prevChild) {\n            // Update `lastIndex` before `_mountIndex` gets unset by unmounting.\n            lastIndex = Math.max(prevChild._mountIndex, lastIndex);\n            // The `removedNodes` loop below will actually remove the child.\n          }\n          // The child must be instantiated before it's mounted.\n          updates = enqueue(updates, this._mountChildAtIndex(nextChild, mountImages[nextMountIndex], lastPlacedNode, nextIndex, transaction, context));\n          nextMountIndex++;\n        }\n        nextIndex++;\n        lastPlacedNode = ReactReconciler.getHostNode(nextChild);\n      }\n      // Remove children that are no longer present.\n      for (name in removedNodes) {\n        if (removedNodes.hasOwnProperty(name)) {\n          updates = enqueue(updates, this._unmountChild(prevChildren[name], removedNodes[name]));\n        }\n      }\n      if (updates) {\n        processQueue(this, updates);\n      }\n      this._renderedChildren = nextChildren;\n      if (process.env.NODE_ENV !== 'production') {\n        setChildrenForInstrumentation.call(this, nextChildren);\n      }\n    },\n    /**\n     * Unmounts all rendered children. This should be used to clean up children\n     * when this component is unmounted. It does not actually perform any\n     * backend operations.\n     *\n     * @internal\n     */\n    unmountChildren: function (safely) {\n      var renderedChildren = this._renderedChildren;\n      ReactChildReconciler.unmountChildren(renderedChildren, safely);\n      this._renderedChildren = null;\n    },\n    /**\n     * Moves a child component to the supplied index.\n     *\n     * @param {ReactComponent} child Component to move.\n     * @param {number} toIndex Destination index of the element.\n     * @param {number} lastIndex Last index visited of the siblings of `child`.\n     * @protected\n     */\n    moveChild: function (child, afterNode, toIndex, lastIndex) {\n      // If the index of `child` is less than `lastIndex`, then it needs to\n      // be moved. Otherwise, we do not need to move it because a child will be\n      // inserted or moved before `child`.\n      if (child._mountIndex < lastIndex) {\n        return makeMove(child, afterNode, toIndex);\n      }\n    },\n    /**\n     * Creates a child component.\n     *\n     * @param {ReactComponent} child Component to create.\n     * @param {string} mountImage Markup to insert.\n     * @protected\n     */\n    createChild: function (child, afterNode, mountImage) {\n      return makeInsertMarkup(mountImage, afterNode, child._mountIndex);\n    },\n    /**\n     * Removes a child component.\n     *\n     * @param {ReactComponent} child Child to remove.\n     * @protected\n     */\n    removeChild: function (child, node) {\n      return makeRemove(child, node);\n    },\n    /**\n     * Mounts a child with the supplied name.\n     *\n     * NOTE: This is part of `updateChildren` and is here for readability.\n     *\n     * @param {ReactComponent} child Component to mount.\n     * @param {string} name Name of the child.\n     * @param {number} index Index at which to insert the child.\n     * @param {ReactReconcileTransaction} transaction\n     * @private\n     */\n    _mountChildAtIndex: function (child, mountImage, afterNode, index, transaction, context) {\n      child._mountIndex = index;\n      return this.createChild(child, afterNode, mountImage);\n    },\n    /**\n     * Unmounts a rendered child.\n     *\n     * NOTE: This is part of `updateChildren` and is here for readability.\n     *\n     * @param {ReactComponent} child Component to unmount.\n     * @private\n     */\n    _unmountChild: function (child, node) {\n      var update = this.removeChild(child, node);\n      child._mountIndex = null;\n      return update;\n    }\n  }\n};\nmodule.exports = ReactMultiChild;","map":{"version":3,"names":["_prodInvariant","require","ReactComponentEnvironment","ReactInstanceMap","ReactInstrumentation","ReactCurrentOwner","ReactReconciler","ReactChildReconciler","emptyFunction","flattenChildren","invariant","makeInsertMarkup","markup","afterNode","toIndex","type","content","fromIndex","fromNode","makeMove","child","_mountIndex","getHostNode","makeRemove","node","makeSetMarkup","makeTextContent","textContent","enqueue","queue","update","push","processQueue","inst","updateQueue","processChildrenUpdates","setChildrenForInstrumentation","process","env","NODE_ENV","getDebugID","_debugID","internal","get","children","debugID","debugTool","onSetChildren","Object","keys","map","key","ReactMultiChild","Mixin","_reconcilerInstantiateChildren","nestedChildren","transaction","context","selfDebugID","_currentElement","current","_owner","instantiateChildren","_reconcilerUpdateChildren","prevChildren","nextNestedChildrenElements","mountImages","removedNodes","nextChildren","updateChildren","_hostContainerInfo","mountChildren","_renderedChildren","index","name","hasOwnProperty","mountImage","mountComponent","call","updateTextContent","nextContent","unmountChildren","updates","updateMarkup","nextMarkup","_updateChildren","nextIndex","lastIndex","nextMountIndex","lastPlacedNode","prevChild","nextChild","moveChild","Math","max","_mountChildAtIndex","_unmountChild","safely","renderedChildren","createChild","removeChild","module","exports"],"sources":["D:/Project_CS/react_side/myapp/node_modules/react-file-viewer/node_modules/react-dom/lib/ReactMultiChild.js"],"sourcesContent":["/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n'use strict';\n\nvar _prodInvariant = require('./reactProdInvariant');\n\nvar ReactComponentEnvironment = require('./ReactComponentEnvironment');\nvar ReactInstanceMap = require('./ReactInstanceMap');\nvar ReactInstrumentation = require('./ReactInstrumentation');\n\nvar ReactCurrentOwner = require('react/lib/ReactCurrentOwner');\nvar ReactReconciler = require('./ReactReconciler');\nvar ReactChildReconciler = require('./ReactChildReconciler');\n\nvar emptyFunction = require('fbjs/lib/emptyFunction');\nvar flattenChildren = require('./flattenChildren');\nvar invariant = require('fbjs/lib/invariant');\n\n/**\n * Make an update for markup to be rendered and inserted at a supplied index.\n *\n * @param {string} markup Markup that renders into an element.\n * @param {number} toIndex Destination index.\n * @private\n */\nfunction makeInsertMarkup(markup, afterNode, toIndex) {\n  // NOTE: Null values reduce hidden classes.\n  return {\n    type: 'INSERT_MARKUP',\n    content: markup,\n    fromIndex: null,\n    fromNode: null,\n    toIndex: toIndex,\n    afterNode: afterNode\n  };\n}\n\n/**\n * Make an update for moving an existing element to another index.\n *\n * @param {number} fromIndex Source index of the existing element.\n * @param {number} toIndex Destination index of the element.\n * @private\n */\nfunction makeMove(child, afterNode, toIndex) {\n  // NOTE: Null values reduce hidden classes.\n  return {\n    type: 'MOVE_EXISTING',\n    content: null,\n    fromIndex: child._mountIndex,\n    fromNode: ReactReconciler.getHostNode(child),\n    toIndex: toIndex,\n    afterNode: afterNode\n  };\n}\n\n/**\n * Make an update for removing an element at an index.\n *\n * @param {number} fromIndex Index of the element to remove.\n * @private\n */\nfunction makeRemove(child, node) {\n  // NOTE: Null values reduce hidden classes.\n  return {\n    type: 'REMOVE_NODE',\n    content: null,\n    fromIndex: child._mountIndex,\n    fromNode: node,\n    toIndex: null,\n    afterNode: null\n  };\n}\n\n/**\n * Make an update for setting the markup of a node.\n *\n * @param {string} markup Markup that renders into an element.\n * @private\n */\nfunction makeSetMarkup(markup) {\n  // NOTE: Null values reduce hidden classes.\n  return {\n    type: 'SET_MARKUP',\n    content: markup,\n    fromIndex: null,\n    fromNode: null,\n    toIndex: null,\n    afterNode: null\n  };\n}\n\n/**\n * Make an update for setting the text content.\n *\n * @param {string} textContent Text content to set.\n * @private\n */\nfunction makeTextContent(textContent) {\n  // NOTE: Null values reduce hidden classes.\n  return {\n    type: 'TEXT_CONTENT',\n    content: textContent,\n    fromIndex: null,\n    fromNode: null,\n    toIndex: null,\n    afterNode: null\n  };\n}\n\n/**\n * Push an update, if any, onto the queue. Creates a new queue if none is\n * passed and always returns the queue. Mutative.\n */\nfunction enqueue(queue, update) {\n  if (update) {\n    queue = queue || [];\n    queue.push(update);\n  }\n  return queue;\n}\n\n/**\n * Processes any enqueued updates.\n *\n * @private\n */\nfunction processQueue(inst, updateQueue) {\n  ReactComponentEnvironment.processChildrenUpdates(inst, updateQueue);\n}\n\nvar setChildrenForInstrumentation = emptyFunction;\nif (process.env.NODE_ENV !== 'production') {\n  var getDebugID = function (inst) {\n    if (!inst._debugID) {\n      // Check for ART-like instances. TODO: This is silly/gross.\n      var internal;\n      if (internal = ReactInstanceMap.get(inst)) {\n        inst = internal;\n      }\n    }\n    return inst._debugID;\n  };\n  setChildrenForInstrumentation = function (children) {\n    var debugID = getDebugID(this);\n    // TODO: React Native empty components are also multichild.\n    // This means they still get into this method but don't have _debugID.\n    if (debugID !== 0) {\n      ReactInstrumentation.debugTool.onSetChildren(debugID, children ? Object.keys(children).map(function (key) {\n        return children[key]._debugID;\n      }) : []);\n    }\n  };\n}\n\n/**\n * ReactMultiChild are capable of reconciling multiple children.\n *\n * @class ReactMultiChild\n * @internal\n */\nvar ReactMultiChild = {\n  /**\n   * Provides common functionality for components that must reconcile multiple\n   * children. This is used by `ReactDOMComponent` to mount, update, and\n   * unmount child components.\n   *\n   * @lends {ReactMultiChild.prototype}\n   */\n  Mixin: {\n    _reconcilerInstantiateChildren: function (nestedChildren, transaction, context) {\n      if (process.env.NODE_ENV !== 'production') {\n        var selfDebugID = getDebugID(this);\n        if (this._currentElement) {\n          try {\n            ReactCurrentOwner.current = this._currentElement._owner;\n            return ReactChildReconciler.instantiateChildren(nestedChildren, transaction, context, selfDebugID);\n          } finally {\n            ReactCurrentOwner.current = null;\n          }\n        }\n      }\n      return ReactChildReconciler.instantiateChildren(nestedChildren, transaction, context);\n    },\n\n    _reconcilerUpdateChildren: function (prevChildren, nextNestedChildrenElements, mountImages, removedNodes, transaction, context) {\n      var nextChildren;\n      var selfDebugID = 0;\n      if (process.env.NODE_ENV !== 'production') {\n        selfDebugID = getDebugID(this);\n        if (this._currentElement) {\n          try {\n            ReactCurrentOwner.current = this._currentElement._owner;\n            nextChildren = flattenChildren(nextNestedChildrenElements, selfDebugID);\n          } finally {\n            ReactCurrentOwner.current = null;\n          }\n          ReactChildReconciler.updateChildren(prevChildren, nextChildren, mountImages, removedNodes, transaction, this, this._hostContainerInfo, context, selfDebugID);\n          return nextChildren;\n        }\n      }\n      nextChildren = flattenChildren(nextNestedChildrenElements, selfDebugID);\n      ReactChildReconciler.updateChildren(prevChildren, nextChildren, mountImages, removedNodes, transaction, this, this._hostContainerInfo, context, selfDebugID);\n      return nextChildren;\n    },\n\n    /**\n     * Generates a \"mount image\" for each of the supplied children. In the case\n     * of `ReactDOMComponent`, a mount image is a string of markup.\n     *\n     * @param {?object} nestedChildren Nested child maps.\n     * @return {array} An array of mounted representations.\n     * @internal\n     */\n    mountChildren: function (nestedChildren, transaction, context) {\n      var children = this._reconcilerInstantiateChildren(nestedChildren, transaction, context);\n      this._renderedChildren = children;\n\n      var mountImages = [];\n      var index = 0;\n      for (var name in children) {\n        if (children.hasOwnProperty(name)) {\n          var child = children[name];\n          var selfDebugID = 0;\n          if (process.env.NODE_ENV !== 'production') {\n            selfDebugID = getDebugID(this);\n          }\n          var mountImage = ReactReconciler.mountComponent(child, transaction, this, this._hostContainerInfo, context, selfDebugID);\n          child._mountIndex = index++;\n          mountImages.push(mountImage);\n        }\n      }\n\n      if (process.env.NODE_ENV !== 'production') {\n        setChildrenForInstrumentation.call(this, children);\n      }\n\n      return mountImages;\n    },\n\n    /**\n     * Replaces any rendered children with a text content string.\n     *\n     * @param {string} nextContent String of content.\n     * @internal\n     */\n    updateTextContent: function (nextContent) {\n      var prevChildren = this._renderedChildren;\n      // Remove any rendered children.\n      ReactChildReconciler.unmountChildren(prevChildren, false);\n      for (var name in prevChildren) {\n        if (prevChildren.hasOwnProperty(name)) {\n          !false ? process.env.NODE_ENV !== 'production' ? invariant(false, 'updateTextContent called on non-empty component.') : _prodInvariant('118') : void 0;\n        }\n      }\n      // Set new text content.\n      var updates = [makeTextContent(nextContent)];\n      processQueue(this, updates);\n    },\n\n    /**\n     * Replaces any rendered children with a markup string.\n     *\n     * @param {string} nextMarkup String of markup.\n     * @internal\n     */\n    updateMarkup: function (nextMarkup) {\n      var prevChildren = this._renderedChildren;\n      // Remove any rendered children.\n      ReactChildReconciler.unmountChildren(prevChildren, false);\n      for (var name in prevChildren) {\n        if (prevChildren.hasOwnProperty(name)) {\n          !false ? process.env.NODE_ENV !== 'production' ? invariant(false, 'updateTextContent called on non-empty component.') : _prodInvariant('118') : void 0;\n        }\n      }\n      var updates = [makeSetMarkup(nextMarkup)];\n      processQueue(this, updates);\n    },\n\n    /**\n     * Updates the rendered children with new children.\n     *\n     * @param {?object} nextNestedChildrenElements Nested child element maps.\n     * @param {ReactReconcileTransaction} transaction\n     * @internal\n     */\n    updateChildren: function (nextNestedChildrenElements, transaction, context) {\n      // Hook used by React ART\n      this._updateChildren(nextNestedChildrenElements, transaction, context);\n    },\n\n    /**\n     * @param {?object} nextNestedChildrenElements Nested child element maps.\n     * @param {ReactReconcileTransaction} transaction\n     * @final\n     * @protected\n     */\n    _updateChildren: function (nextNestedChildrenElements, transaction, context) {\n      var prevChildren = this._renderedChildren;\n      var removedNodes = {};\n      var mountImages = [];\n      var nextChildren = this._reconcilerUpdateChildren(prevChildren, nextNestedChildrenElements, mountImages, removedNodes, transaction, context);\n      if (!nextChildren && !prevChildren) {\n        return;\n      }\n      var updates = null;\n      var name;\n      // `nextIndex` will increment for each child in `nextChildren`, but\n      // `lastIndex` will be the last index visited in `prevChildren`.\n      var nextIndex = 0;\n      var lastIndex = 0;\n      // `nextMountIndex` will increment for each newly mounted child.\n      var nextMountIndex = 0;\n      var lastPlacedNode = null;\n      for (name in nextChildren) {\n        if (!nextChildren.hasOwnProperty(name)) {\n          continue;\n        }\n        var prevChild = prevChildren && prevChildren[name];\n        var nextChild = nextChildren[name];\n        if (prevChild === nextChild) {\n          updates = enqueue(updates, this.moveChild(prevChild, lastPlacedNode, nextIndex, lastIndex));\n          lastIndex = Math.max(prevChild._mountIndex, lastIndex);\n          prevChild._mountIndex = nextIndex;\n        } else {\n          if (prevChild) {\n            // Update `lastIndex` before `_mountIndex` gets unset by unmounting.\n            lastIndex = Math.max(prevChild._mountIndex, lastIndex);\n            // The `removedNodes` loop below will actually remove the child.\n          }\n          // The child must be instantiated before it's mounted.\n          updates = enqueue(updates, this._mountChildAtIndex(nextChild, mountImages[nextMountIndex], lastPlacedNode, nextIndex, transaction, context));\n          nextMountIndex++;\n        }\n        nextIndex++;\n        lastPlacedNode = ReactReconciler.getHostNode(nextChild);\n      }\n      // Remove children that are no longer present.\n      for (name in removedNodes) {\n        if (removedNodes.hasOwnProperty(name)) {\n          updates = enqueue(updates, this._unmountChild(prevChildren[name], removedNodes[name]));\n        }\n      }\n      if (updates) {\n        processQueue(this, updates);\n      }\n      this._renderedChildren = nextChildren;\n\n      if (process.env.NODE_ENV !== 'production') {\n        setChildrenForInstrumentation.call(this, nextChildren);\n      }\n    },\n\n    /**\n     * Unmounts all rendered children. This should be used to clean up children\n     * when this component is unmounted. It does not actually perform any\n     * backend operations.\n     *\n     * @internal\n     */\n    unmountChildren: function (safely) {\n      var renderedChildren = this._renderedChildren;\n      ReactChildReconciler.unmountChildren(renderedChildren, safely);\n      this._renderedChildren = null;\n    },\n\n    /**\n     * Moves a child component to the supplied index.\n     *\n     * @param {ReactComponent} child Component to move.\n     * @param {number} toIndex Destination index of the element.\n     * @param {number} lastIndex Last index visited of the siblings of `child`.\n     * @protected\n     */\n    moveChild: function (child, afterNode, toIndex, lastIndex) {\n      // If the index of `child` is less than `lastIndex`, then it needs to\n      // be moved. Otherwise, we do not need to move it because a child will be\n      // inserted or moved before `child`.\n      if (child._mountIndex < lastIndex) {\n        return makeMove(child, afterNode, toIndex);\n      }\n    },\n\n    /**\n     * Creates a child component.\n     *\n     * @param {ReactComponent} child Component to create.\n     * @param {string} mountImage Markup to insert.\n     * @protected\n     */\n    createChild: function (child, afterNode, mountImage) {\n      return makeInsertMarkup(mountImage, afterNode, child._mountIndex);\n    },\n\n    /**\n     * Removes a child component.\n     *\n     * @param {ReactComponent} child Child to remove.\n     * @protected\n     */\n    removeChild: function (child, node) {\n      return makeRemove(child, node);\n    },\n\n    /**\n     * Mounts a child with the supplied name.\n     *\n     * NOTE: This is part of `updateChildren` and is here for readability.\n     *\n     * @param {ReactComponent} child Component to mount.\n     * @param {string} name Name of the child.\n     * @param {number} index Index at which to insert the child.\n     * @param {ReactReconcileTransaction} transaction\n     * @private\n     */\n    _mountChildAtIndex: function (child, mountImage, afterNode, index, transaction, context) {\n      child._mountIndex = index;\n      return this.createChild(child, afterNode, mountImage);\n    },\n\n    /**\n     * Unmounts a rendered child.\n     *\n     * NOTE: This is part of `updateChildren` and is here for readability.\n     *\n     * @param {ReactComponent} child Component to unmount.\n     * @private\n     */\n    _unmountChild: function (child, node) {\n      var update = this.removeChild(child, node);\n      child._mountIndex = null;\n      return update;\n    }\n  }\n};\n\nmodule.exports = ReactMultiChild;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}